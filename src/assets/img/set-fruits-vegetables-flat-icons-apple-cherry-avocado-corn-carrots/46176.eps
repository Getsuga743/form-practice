%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1501.m00.i123.n016.P.c20.204490867 Fruits and vegetables flat icons.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For:  
%%CreationDate: 1/23/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-01-23T11:39:41+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2015-01-23T11:39:41+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-01-23T11:39:41+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A45irsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVVbe2nuZ0gt42lmkNEjQVYnwAwSkALPJBNI6by15ghMYl0+dDM4jiDRsOTkEhR70U5UNRjPKQ&#xA;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&#xA;VdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:c6107e12-afed-f748-8180-b2855eda8404</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:c6107e12-afed-f748-8180-b2855eda8404</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:3c175455-6b09-4841-809e-3caede59c013</stRef:instanceID>
            <stRef:documentID>xmp.did:3c175455-6b09-4841-809e-3caede59c013</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1984a4eb-7aae-ea4b-be10-3368ba5cb5eb</stEvt:instanceID>
                  <stEvt:when>2015-01-19T14:44:10+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c6107e12-afed-f748-8180-b2855eda8404</stEvt:instanceID>
                  <stEvt:when>2015-01-23T11:39:41+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=235 G=33 B=33</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>235</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=191 G=29 B=29</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>191</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>28</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=54 G=54 B=54</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>54</xmpG:red>
                           <xmpG:green>54</xmpG:green>
                           <xmpG:blue>54</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 G=148 B=59</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=133 G=194 B=88</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>133</xmpG:red>
                           <xmpG:green>193</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=227 G=180 B=32</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>226</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>31</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=254 G=206 B=57</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>253</xmpG:red>
                           <xmpG:green>205</xmpG:green>
                           <xmpG:blue>56</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=169 G=178 B=96</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>168</xmpG:red>
                           <xmpG:green>177</xmpG:green>
                           <xmpG:blue>96</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=226 G=228 B=193</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>226</xmpG:red>
                           <xmpG:green>228</xmpG:green>
                           <xmpG:blue>193</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=18 G=69 B=6</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>17</xmpG:red>
                           <xmpG:green>68</xmpG:green>
                           <xmpG:blue>5</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=80 G=128 B=42</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>80</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>42</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=112 G=189 B=55</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>112</xmpG:red>
                           <xmpG:green>188</xmpG:green>
                           <xmpG:blue>54</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=81 B=44</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>80</xmpG:green>
                           <xmpG:blue>43</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=254 G=236 B=183</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>253</xmpG:red>
                           <xmpG:green>235</xmpG:green>
                           <xmpG:blue>182</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=166 B=47</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>165</xmpG:green>
                           <xmpG:blue>47</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=112 G=199 B=118</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>112</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=23 G=125 B=30</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>22</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>29</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=27 G=143 B=35</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>26</xmpG:red>
                           <xmpG:green>142</xmpG:green>
                           <xmpG:blue>35</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=126 G=163 B=50</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>126</xmpG:red>
                           <xmpG:green>163</xmpG:green>
                           <xmpG:blue>49</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=149 B=148</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>147</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=190 B=143</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>189</xmpG:green>
                           <xmpG:blue>142</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=209 G=99 B=19</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>98</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=113 B=22</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>112</xmpG:green>
                           <xmpG:blue>22</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=97 G=125 B=38</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>38</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=211 B=122</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>121</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=235 G=181 B=72</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>235</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>72</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=133 B=34</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>133</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=229 G=103 B=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>228</xmpG:red>
                           <xmpG:green>103</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=232 G=149 B=121</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>232</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>121</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=156 G=82 B=57</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>156</xmpG:red>
                           <xmpG:green>82</xmpG:green>
                           <xmpG:blue>56</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=185 G=97 B=68</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>184</xmpG:red>
                           <xmpG:green>96</xmpG:green>
                           <xmpG:blue>68</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=254 G=241 B=168</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>253</xmpG:red>
                           <xmpG:green>240</xmpG:green>
                           <xmpG:blue>168</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=227 G=216 B=150</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>226</xmpG:red>
                           <xmpG:green>216</xmpG:green>
                           <xmpG:blue>149</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=156 G=184 B=99</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>156</xmpG:red>
                           <xmpG:green>184</xmpG:green>
                           <xmpG:blue>98</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=170 G=201 B=108</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>170</xmpG:red>
                           <xmpG:green>200</xmpG:green>
                           <xmpG:blue>107</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=57 G=125 B=70</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>56</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>70</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=71 G=156 B=87</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>70</xmpG:red>
                           <xmpG:green>156</xmpG:green>
                           <xmpG:blue>86</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=227 G=124 B=109</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>226</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>109</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=148 G=21 B=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>21</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=178 G=25 B=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>177</xmpG:red>
                           <xmpG:green>24</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=211 G=250 B=162</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>211</xmpG:red>
                           <xmpG:green>249</xmpG:green>
                           <xmpG:blue>161</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=131 G=207 B=33</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>131</xmpG:red>
                           <xmpG:green>207</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=164 G=222 B=89</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>163</xmpG:red>
                           <xmpG:green>221</xmpG:green>
                           <xmpG:blue>89</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=84 G=22 B=12</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>84</xmpG:red>
                           <xmpG:green>22</xmpG:green>
                           <xmpG:blue>12</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.211765 .211765 .211765 rgb
f
74.9692 124.131 mo
74.1406 124.131 73.4692 123.46 73.4692 122.631 cv
73.4692 114.464 78.2485 106.949 85.6455 103.486 cv
86.3984 103.134 87.2891 103.458 87.6401 104.208 cv
87.9917 104.959 87.668 105.852 86.918 106.203 cv
80.5703 109.174 76.4692 115.623 76.4692 122.631 cv
76.4692 123.46 75.7979 124.131 74.9692 124.131 cv
cp
.329412 .086275 .047059 rgb
f
70.85 167.844 mo
74.9693 162.844 li
79.0886 167.844 li
70.85 167.844 li
cp
f
101.912 141.594 mo
101.912 149.974 98.7818 157.334 94.0618 161.564 cv
90.8018 164.484 86.8118 165.844 83.1518 165.844 cv
79.9418 165.844 76.9718 164.794 74.9718 162.854 cv
70.6718 167.024 61.9718 167.034 55.8718 161.564 cv
51.1518 157.334 48.0318 149.974 48.0318 141.594 cv
48.0318 128.484 55.7018 117.844 65.1518 117.844 cv
68.8118 117.844 72.1918 119.434 74.9718 122.134 cv
77.7518 119.434 81.1318 117.844 84.7818 117.844 cv
94.2418 117.844 101.912 128.484 101.912 141.594 cv
cp
.643137 .870588 .34902 rgb
f
101.912 141.594 mo
101.912 149.974 98.7818 157.334 94.0618 161.564 cv
90.8018 164.484 86.8118 165.844 83.1518 165.844 cv
79.9418 165.844 76.9718 164.794 74.9718 162.854 cv
74.9718 122.134 li
77.7518 119.434 81.1318 117.844 84.7818 117.844 cv
94.2418 117.844 101.912 128.484 101.912 141.594 cv
cp
.513726 .811765 .129412 rgb
f
67.5318 132.094 mo
67.5318 134.856 65.2932 137.094 62.5318 137.094 cv
59.7704 137.094 57.5318 134.856 57.5318 132.094 cv
57.5318 129.333 59.7704 127.094 62.5318 127.094 cv
65.2932 127.094 67.5318 129.333 67.5318 132.094 cv
cp
.827451 .980392 .635294 rgb
f
63.3386 112.8 mo
69.1977 116.183 77.4474 112.863 77.4474 112.863 cv
56.2298 100.613 li
56.2298 100.613 57.4795 109.417 63.3386 112.8 cv
cp
.223529 .490196 .27451 rgb
f
70.3386 100.676 mo
64.4795 97.293 56.2298 100.613 56.2298 100.613 cv
77.4474 112.863 li
77.4474 112.863 76.1977 104.059 70.3386 100.676 cv
cp
.278431 .611765 .341176 rgb
f
154.212 154 mo
154.073 153.99 li
153.526 153.915 153.144 153.409 153.22 152.862 cv
155.532 136.235 165.057 121.653 179.353 112.855 cv
179.825 112.565 180.44 112.712 180.729 113.183 cv
181.019 113.653 180.872 114.269 180.402 114.559 cv
166.615 123.043 157.43 137.104 155.201 153.138 cv
155.131 153.638 154.703 154 154.212 154 cv
cp
.223529 .490196 .27451 rgb
f
154.211 164.5 mo
147.859 164.5 142.711 159.351 142.711 153 cv
142.711 146.649 147.859 141.5 154.211 141.5 cv
154.211 164.5 li
cp
.698039 .098039 0 rgb
f
154.211 141.5 mo
160.562 141.5 165.711 146.649 165.711 153 cv
165.711 159.351 160.562 164.5 154.211 164.5 cv
154.211 141.5 li
cp
.580392 .082353 0 rgb
f
152.711 149 mo
152.711 150.381 151.591 151.5 150.211 151.5 cv
148.83 151.5 147.711 150.381 147.711 149 cv
147.711 147.619 148.83 146.5 150.211 146.5 cv
151.591 146.5 152.711 147.619 152.711 149 cv
cp
.890196 .486275 .427451 rgb
f
182.211 154 mo
181.894 154 181.583 153.85 181.389 153.57 cv
173.075 141.581 172.157 126.127 178.994 113.238 cv
179.253 112.751 179.858 112.565 180.346 112.824 cv
180.834 113.082 181.02 113.688 180.761 114.176 cv
174.276 126.4 175.146 141.059 183.032 152.43 cv
183.347 152.884 183.234 153.507 182.781 153.822 cv
182.607 153.942 182.408 154 182.211 154 cv
cp
.223529 .490196 .27451 rgb
f
182.211 164.5 mo
175.859 164.5 170.711 159.351 170.711 153 cv
170.711 146.649 175.859 141.5 182.211 141.5 cv
182.211 164.5 li
cp
.698039 .098039 0 rgb
f
182.211 141.5 mo
188.562 141.5 193.711 146.649 193.711 153 cv
193.711 159.351 188.562 164.5 182.211 164.5 cv
182.211 141.5 li
cp
.580392 .082353 0 rgb
f
180.711 149 mo
180.711 150.381 179.591 151.5 178.211 151.5 cv
176.83 151.5 175.711 150.381 175.711 149 cv
175.711 147.619 176.83 146.5 178.211 146.5 cv
179.591 146.5 180.711 147.619 180.711 149 cv
cp
.890196 .486275 .427451 rgb
f
165.768 113.644 mo
171.627 117.027 179.877 113.707 179.877 113.707 cv
158.66 101.457 li
158.66 101.457 159.909 110.261 165.768 113.644 cv
cp
.223529 .490196 .27451 rgb
f
172.768 101.52 mo
166.909 98.1372 158.66 101.457 158.66 101.457 cv
179.877 113.707 li
179.877 113.707 178.627 104.903 172.768 101.52 cv
cp
.278431 .611765 .341176 rgb
f
190.91 106.707 mo
197.675 106.707 203.16 113.707 203.16 113.707 cv
178.66 113.707 li
178.66 113.707 184.144 106.707 190.91 106.707 cv
cp
f
190.91 120.707 mo
184.144 120.707 178.66 113.707 178.66 113.707 cv
203.16 113.707 li
203.16 113.707 197.675 120.707 190.91 120.707 cv
cp
.223529 .490196 .27451 rgb
f
155.376 258.046 mo
155.376 249.726 159.059 245.055 162.959 237.992 cv
163.406 237.182 163.854 236.371 164.298 235.556 cv
165.117 234.048 165.82 232.575 166.44 231.276 cv
169.094 225.714 170.226 223.79 174.442 223.79 cv
174.442 220.79 li
166.554 220.79 165.604 226.872 161.662 234.123 cv
157.254 242.23 152.376 247.944 152.376 258.045 cv
152.376 272.04 158.819 283.79 174.442 283.79 cv
174.442 280.79 li
157.234 280.79 155.376 264.884 155.376 258.046 cv
cp
.666667 .788235 .423529 rgb
f
187.222 234.123 mo
183.28 226.872 182.33 220.79 174.442 220.79 cv
174.442 223.79 li
178.658 223.79 179.79 225.714 182.444 231.277 cv
183.064 232.576 183.766 234.048 184.586 235.556 cv
185.029 236.371 185.477 237.182 185.924 237.992 cv
189.824 245.055 193.507 249.726 193.507 258.046 cv
193.507 264.884 191.65 280.79 174.442 280.79 cv
174.442 283.79 li
189.9 283.79 196.508 272.262 196.508 258.045 cv
196.508 247.944 191.63 242.23 187.222 234.123 cv
cp
.611765 .721569 .388235 rgb
f
184.442 258.04 mo
184.442 263.563 179.965 268.04 174.442 268.04 cv
174.442 280.79 li
191.649 280.79 193.507 264.884 193.507 258.046 cv
193.507 249.726 189.824 245.055 185.924 237.992 cv
185.477 237.182 185.029 236.371 184.586 235.556 cv
183.766 234.048 183.064 232.576 182.444 231.277 cv
179.79 225.714 178.658 223.79 174.442 223.79 cv
174.442 246.04 li
178.86 246.04 184.442 252.517 184.442 258.04 cv
cp
.890196 .847059 .588235 rgb
f
166.44 231.276 mo
165.82 232.575 165.117 234.048 164.298 235.556 cv
163.854 236.371 163.406 237.182 162.959 237.992 cv
159.059 245.055 155.376 249.726 155.376 258.046 cv
155.376 264.884 157.234 280.79 174.442 280.79 cv
174.442 268.04 li
168.919 268.04 164.442 263.563 164.442 258.04 cv
164.442 252.517 170.024 246.04 174.442 246.04 cv
174.442 223.79 li
170.226 223.79 169.094 225.714 166.44 231.276 cv
cp
.996078 .945098 .658824 rgb
f
163.078 259.926 mo
163.078 266.202 168.166 271.29 174.442 271.29 cv
174.442 246.29 li
169.421 246.29 163.078 253.65 163.078 259.926 cv
cp
.72549 .380392 .266667 rgb
f
185.805 259.926 mo
185.805 253.65 179.463 246.29 174.442 246.29 cv
174.442 271.29 li
180.718 271.29 185.805 266.202 185.805 259.926 cv
cp
.611765 .321569 .223529 rgb
f
172.727 254.434 mo
172.727 255.794 171.625 256.896 170.265 256.896 cv
168.905 256.896 167.803 255.794 167.803 254.434 cv
167.803 253.074 168.905 251.972 170.265 251.972 cv
171.625 251.972 172.727 253.074 172.727 254.434 cv
cp
.909804 .584314 .47451 rgb
f
271.346 165.344 mo
255.606 165.344 242.846 152.584 242.846 136.844 cv
242.846 121.104 255.606 108.344 271.346 108.344 cv
271.346 165.344 li
cp
1 .521569 .133333 rgb
f
271.346 108.344 mo
287.086 108.344 299.846 121.104 299.846 136.844 cv
299.846 152.584 287.086 165.344 271.346 165.344 cv
271.346 108.344 li
cp
.898039 .403922 0 rgb
f
271.346 115.733 mo
259.686 115.733 250.235 125.185 250.235 136.844 cv
250.235 148.503 259.686 157.955 271.346 157.955 cv
271.346 115.733 li
cp
1 .521569 .133333 rgb
f
287.461 150.466 mo
275.168 138.173 li
292.39 138.173 li
292.098 142.846 290.304 147.106 287.461 150.466 cv
cp
272.929 157.875 mo
272.929 140.412 li
285.234 152.717 li
281.893 155.643 277.629 157.526 272.929 157.875 cv
cp
272.929 115.813 mo
277.503 116.153 281.668 117.938 284.968 120.729 cv
272.929 132.768 li
272.929 115.813 li
cp
292.364 135.007 mo
275.168 135.007 li
287.219 122.956 li
290.092 126.237 291.967 130.406 292.364 135.007 cv
cp
271.346 112.566 mo
271.346 161.122 li
284.754 161.122 295.624 150.252 295.624 136.844 cv
295.624 123.436 284.754 112.566 271.346 112.566 cv
cp
.921569 .709804 .282353 rgb
f
269.762 132.768 mo
257.724 120.729 li
261.023 117.938 265.189 116.153 269.762 115.813 cv
269.762 132.768 li
cp
269.762 157.875 mo
265.062 157.526 260.799 155.643 257.458 152.717 cv
269.762 140.412 li
269.762 157.875 li
cp
250.302 138.173 mo
267.524 138.173 li
255.231 150.466 li
252.388 147.106 250.594 142.846 250.302 138.173 cv
cp
255.473 122.956 mo
267.524 135.007 li
250.327 135.007 li
250.725 130.406 252.6 126.237 255.473 122.956 cv
cp
247.068 136.844 mo
247.068 150.252 257.938 161.122 271.346 161.122 cv
271.346 112.566 li
257.938 112.566 247.068 123.436 247.068 136.844 cv
cp
1 .827451 .478431 rgb
f
258.19 130.23 mo
258.19 131.418 257.226 132.382 256.038 132.382 cv
254.849 132.382 253.885 131.418 253.885 130.23 cv
253.885 129.041 254.849 128.077 256.038 128.077 cv
257.226 128.077 258.19 129.041 258.19 130.23 cv
cp
f
377.409 345.947 mo
377.103 345.947 376.795 345.854 376.528 345.661 cv
375.858 345.174 375.71 344.235 376.196 343.565 cv
386.418 329.496 li
386.905 328.827 387.842 328.677 388.514 329.164 cv
389.184 329.651 389.332 330.59 388.846 331.26 cv
378.624 345.329 li
378.33 345.732 377.873 345.947 377.409 345.947 cv
cp
.380392 .490196 .14902 rgb
f
377.41 345.947 mo
377.249 345.947 377.085 345.922 376.923 345.866 cv
376.14 345.598 375.723 344.744 375.991 343.961 cv
380.707 330.217 li
380.976 329.432 381.828 329.013 382.612 329.284 cv
383.396 329.553 383.813 330.406 383.545 331.189 cv
378.829 344.933 li
378.615 345.556 378.033 345.947 377.41 345.947 cv
cp
.494118 .639216 .196078 rgb
f
377.41 345.947 mo
376.804 345.947 376.231 345.576 376.006 344.974 cv
375.715 344.199 376.107 343.334 376.883 343.043 cv
393.164 336.931 li
393.938 336.641 394.805 337.032 395.096 337.808 cv
395.387 338.584 394.994 339.449 394.219 339.74 cv
377.938 345.851 li
377.764 345.917 377.586 345.947 377.41 345.947 cv
cp
.380392 .490196 .14902 rgb
f
377.409 345.947 mo
376.622 345.947 375.962 345.335 375.913 344.539 cv
375.862 343.712 376.491 343.001 377.318 342.95 cv
391.821 342.059 li
392.654 342 393.359 342.638 393.41 343.465 cv
393.461 344.292 392.832 345.003 392.005 345.053 cv
377.502 345.944 li
377.409 345.947 li
cp
.494118 .639216 .196078 rgb
f
377.411 345.947 mo
376.959 345.947 376.512 345.743 376.217 345.356 cv
375.715 344.697 375.843 343.756 376.501 343.254 cv
390.946 332.255 li
391.605 331.752 392.547 331.881 393.049 332.539 cv
393.551 333.198 393.423 334.139 392.765 334.641 cv
378.319 345.641 li
378.048 345.848 377.727 345.947 377.411 345.947 cv
cp
f
356.752 349.493 mo
342.21 360.565 321.907 380.807 324.751 384.543 cv
377.41 344.447 li
374.566 340.712 371.293 338.421 356.752 349.493 cv
cp
.929412 .443137 .086275 rgb
f
377.41 344.447 mo
324.751 384.543 li
327.595 388.277 352.509 374.091 367.05 363.019 cv
381.592 351.946 380.254 348.182 377.41 344.447 cv
cp
.819608 .388235 .07451 rgb
f
341.936 367.381 mo
341.679 367.381 341.422 367.282 341.227 367.085 cv
340.838 366.692 340.84 366.059 341.232 365.671 cv
349.73 357.245 359.303 349.957 369.684 344.008 cv
370.16 343.734 370.773 343.898 371.048 344.378 cv
371.323 344.856 371.157 345.468 370.678 345.742 cv
360.448 351.605 351.016 358.788 342.641 367.091 cv
342.445 367.284 342.191 367.381 341.936 367.381 cv
cp
1 .745098 .560784 rgb
f
393.14 368.243 mo
392.695 368.243 392.256 368.047 391.96 367.671 cv
391.447 367.02 391.559 366.077 392.211 365.564 cv
405.872 354.803 li
406.521 354.293 407.466 354.403 407.978 355.055 cv
408.491 355.705 408.379 356.648 407.727 357.161 cv
394.066 367.922 li
393.792 368.138 393.465 368.243 393.14 368.243 cv
cp
.380392 .490196 .14902 rgb
f
393.138 368.243 mo
392.843 368.243 392.545 368.156 392.284 367.976 cv
391.603 367.505 391.434 366.57 391.905 365.888 cv
400.18 353.944 li
400.653 353.263 401.587 353.096 402.267 353.565 cv
402.948 354.037 403.118 354.971 402.646 355.653 cv
394.372 367.598 li
394.08 368.017 393.613 368.243 393.138 368.243 cv
cp
.494118 .639216 .196078 rgb
f
393.137 368.243 mo
392.365 368.243 391.71 367.651 391.643 366.869 cv
391.574 366.043 392.188 365.317 393.013 365.248 cv
410.342 363.793 li
411.178 363.739 411.892 364.338 411.963 365.162 cv
412.032 365.988 411.419 366.714 410.594 366.783 cv
393.265 368.238 li
393.137 368.243 li
cp
.380392 .490196 .14902 rgb
f
407.339 371.329 mo
407.233 371.329 407.127 371.318 407.019 371.295 cv
392.82 368.209 li
392.011 368.033 391.497 367.234 391.673 366.425 cv
391.849 365.615 392.643 365.096 393.457 365.277 cv
407.656 368.363 li
408.466 368.539 408.979 369.338 408.804 370.147 cv
408.651 370.849 408.029 371.329 407.339 371.329 cv
cp
.494118 .639216 .196078 rgb
f
393.139 368.243 mo
392.541 368.243 391.975 367.884 391.743 367.293 cv
391.439 366.522 391.817 365.651 392.589 365.348 cv
409.479 358.689 li
410.248 358.387 411.121 358.763 411.425 359.535 cv
411.728 360.306 411.35 361.177 410.579 361.48 cv
393.688 368.138 li
393.508 368.21 393.322 368.243 393.139 368.243 cv
cp
f
371.886 365.983 mo
354.883 372.686 329.841 386.647 331.563 391.014 cv
393.139 366.743 li
391.417 362.375 388.89 359.281 371.886 365.983 cv
cp
.929412 .443137 .086275 rgb
f
393.139 366.743 mo
331.563 391.014 li
333.284 395.381 361.117 388.501 378.12 381.799 cv
395.124 375.097 394.86 371.11 393.139 366.743 cv
cp
.819608 .388235 .07451 rgb
f
362.956 374.23 mo
362.575 374.23 362.211 374.012 362.044 373.642 cv
361.816 373.138 362.04 372.547 362.543 372.319 cv
370.024 368.937 377.856 366.212 385.822 364.22 cv
386.364 364.082 386.901 364.411 387.035 364.946 cv
387.17 365.482 386.844 366.025 386.309 366.159 cv
378.458 368.123 370.739 370.809 363.367 374.141 cv
363.233 374.202 363.094 374.23 362.956 374.23 cv
cp
1 .745098 .560784 rgb
f
66.8984 237.959 mo
66.1387 237.959 65.4868 237.384 65.4082 236.611 cv
64.8501 231.131 65.3462 225.67 66.8833 220.379 cv
67.1138 219.583 67.9453 219.12 68.7422 219.357 cv
69.5376 219.588 69.9951 220.42 69.7642 221.215 cv
68.335 226.135 67.8735 231.212 68.3926 236.307 cv
68.4766 237.131 67.8765 237.867 67.0523 237.951 cv
66.8984 237.959 li
cp
.494118 .639216 .196078 rgb
f
82.1966 249.934 mo
87.3598 257.056 96.9782 265.178 106.702 269.975 cv
116.162 275.109 125.726 276.918 124.684 279.176 cv
93.8274 277.413 72.3761 257.105 66.3835 235.644 cv
71.2614 234.768 72.3847 235.612 82.1966 249.934 cv
cp
.921569 .129412 .129412 rgb
f
66.3835 235.644 mo
72.3761 257.105 93.8273 277.414 124.684 279.176 cv
124.181 281.166 112.321 283.1 99.9196 279.161 cv
87.388 275.711 74.3151 266.387 68.3824 257.162 cv
56.8695 238.295 63.006 236.069 66.3835 235.644 cv
cp
.74902 .113725 .113725 rgb
f
87.4756 261.171 mo
87.1704 261.171 86.8648 261.06 86.6235 260.835 cv
80.3521 254.988 75.0435 248.322 70.8447 241.025 cv
70.5005 240.427 70.7065 239.662 71.3047 239.318 cv
71.9048 238.974 72.668 239.18 73.0117 239.779 cv
77.0859 246.86 82.2393 253.329 88.3286 259.007 cv
88.8335 259.478 88.8613 260.269 88.3901 260.774 cv
88.144 261.037 87.8106 261.171 87.4756 261.171 cv
cp
1 .584314 .580392 rgb
f
52.5855 250.252 mo
51.9414 250.252 51.3462 249.834 51.1499 249.186 cv
49.5571 243.913 49.002 238.458 49.501 232.971 cv
49.5762 232.145 50.3042 231.539 51.1304 231.613 cv
51.9556 231.688 52.5635 232.417 52.4883 233.242 cv
52.0249 238.344 52.5405 243.416 54.022 248.318 cv
54.2612 249.111 53.813 249.948 53.02 250.188 cv
52.875 250.232 52.729 250.252 52.5855 250.252 cv
cp
.494118 .639216 .196078 rgb
f
70.1726 259.061 mo
76.5998 265.067 87.5913 271.204 98.0518 274.059 cv
108.317 277.293 118.051 277.244 117.459 279.659 cv
86.833 283.816 61.9007 267.974 51.9233 248.051 cv
56.5444 246.26 57.8081 246.874 70.1726 259.061 cv
cp
.105882 .560784 .137255 rgb
f
51.9233 248.051 mo
61.9007 267.974 86.8329 283.816 117.459 279.659 cv
117.345 281.708 106.072 285.87 93.1467 284.369 cv
80.1871 283.374 65.5753 276.716 57.9914 268.792 cv
43.09 252.469 48.6891 249.113 51.9233 248.051 cv
cp
.090196 .490196 .117647 rgb
f
77.2598 269.108 mo
77.0332 269.108 76.8042 269.046 76.5986 268.918 cv
69.3262 264.374 62.8433 258.844 57.3291 252.482 cv
56.877 251.96 56.9336 251.171 57.4551 250.719 cv
57.9775 250.266 58.7666 250.323 59.2188 250.845 cv
64.5689 257.019 70.8623 262.386 77.9229 266.797 cv
78.5088 267.163 78.6865 267.935 78.3208 268.52 cv
78.084 268.9 77.6763 269.108 77.2598 269.108 cv
cp
.439216 .780392 .462745 rgb
f
362.459 109.846 mo
360.667 108.512 li
362.007 106.256 362.825 104.76 364.429 102.802 cv
366.221 104.135 li
364.459 106.16 363.665 107.513 362.459 109.846 cv
cp
.968627 .65098 .184314 rgb
f
366.572 111.613 mo
365.967 108.66 365.836 106.877 365.82 104.379 cv
368.067 103.849 li
368.014 106.805 368.234 108.487 368.819 111.083 cv
366.572 111.613 li
cp
f
405.477 152.653 mo
404.202 154.634 402.126 155.77 400.427 156.115 cv
397.573 156.703 381.49 158.568 370.889 146.381 cv
360.285 134.199 362.658 118.674 363.079 115.991 cv
363.401 113.971 364.253 111.801 366.159 110.869 cv
366.473 110.715 366.807 110.596 367.173 110.517 cv
370.106 109.865 371.933 112.552 372.513 115.374 cv
373.152 118.474 373.516 128.283 381.622 136.57 cv
387.456 142.532 396.602 143.643 399.21 144.492 cv
401.68 145.293 403.826 146.395 405.098 147.925 cv
405.388 148.259 405.632 148.622 405.824 149.012 cv
406.103 149.56 406.279 150.163 406.334 150.812 cv
406.13 151.494 405.838 152.108 405.477 152.653 cv
cp
.996078 .807843 .223529 rgb
f
400.427 156.115 mo
397.573 156.703 381.49 158.568 370.889 146.381 cv
360.285 134.199 362.658 118.674 363.079 115.991 cv
363.401 113.971 364.253 111.801 366.159 110.869 cv
361.89 145.943 388.532 153.874 399.736 152.511 cv
402.866 152.13 404.853 150.283 405.824 149.012 cv
406.103 149.56 406.279 150.163 406.334 150.812 cv
405.384 153.946 402.593 155.677 400.427 156.115 cv
cp
.968627 .65098 .184314 rgb
f
375.256 166.606 mo
374.499 167.273 373.692 167.79 372.856 168.159 cv
371.013 168.986 369.046 169.094 367.224 168.566 cv
363.007 167.341 348.391 159.609 345.13 143.126 cv
341.988 127.284 352.866 112.681 354.745 110.723 cv
356.238 109.17 358.709 107.83 360.97 107.975 cv
361.394 108.007 361.807 108.083 362.208 108.223 cv
365.047 109.212 364.951 113.334 363.968 116.038 cv
362.882 119.016 358.038 126.837 360.302 138.209 cv
362.469 149.107 370.741 155.386 372.518 157.48 cv
374.448 159.757 375.232 161.672 375.346 164.003 cv
375.371 164.504 375.364 165.019 375.336 165.567 cv
375.319 165.901 375.291 166.245 375.256 166.606 cv
cp
.996078 .807843 .223529 rgb
f
375.256 166.606 mo
372.805 168.766 369.865 169.333 367.224 168.566 cv
363.007 167.341 348.391 159.609 345.13 143.126 cv
341.988 127.284 352.866 112.681 354.745 110.723 cv
356.238 109.17 358.709 107.83 360.97 107.975 cv
351.428 122.281 339.074 145.655 367.526 164.423 cv
370.804 166.583 374.047 166.969 375.336 165.567 cv
375.319 165.901 375.291 166.245 375.256 166.606 cv
cp
.968627 .65098 .184314 rgb
f
375.873 137.141 mo
375.635 137.36 li
375.07 137.757 374.29 137.621 373.893 137.056 cv
370.097 131.659 367.861 125.325 367.427 118.739 cv
367.381 118.05 367.903 117.455 368.592 117.41 cv
369.281 117.364 369.876 117.886 369.922 118.575 cv
370.326 124.702 372.406 130.596 375.938 135.618 cv
376.272 136.092 376.229 136.718 375.873 137.141 cv
cp
.996078 .92549 .717647 rgb
f
357.654 149.676 mo
357.554 149.796 357.429 149.899 357.282 149.976 cv
356.672 150.299 355.915 150.066 355.593 149.455 cv
351.545 141.797 351.189 132.844 354.615 124.892 cv
354.888 124.259 355.624 123.966 356.258 124.239 cv
356.892 124.512 357.184 125.248 356.911 125.882 cv
353.786 133.135 354.111 141.301 357.803 148.287 cv
358.048 148.75 357.972 149.298 357.654 149.676 cv
cp
f
376.959 108.665 mo
376.595 109.098 376 109.306 375.417 109.148 cv
368.914 107.381 362.711 104.684 356.983 101.132 cv
356.279 100.695 356.062 99.7705 356.499 99.0665 cv
356.929 98.3609 357.859 98.1453 358.564 98.5822 cv
364.045 101.981 369.98 104.561 376.204 106.253 cv
377.003 106.47 377.476 107.295 377.258 108.093 cv
377.199 108.311 377.095 108.504 376.959 108.665 cv
cp
.996078 .807843 .223529 rgb
f
399.418 250.413 mo
399.418 266.153 386.658 278.913 370.918 278.913 cv
355.178 278.913 342.418 266.153 342.418 250.413 cv
342.418 234.673 355.178 221.913 370.918 221.913 cv
386.658 221.913 399.418 234.673 399.418 250.413 cv
.301961 .317647 .172549 rgb
f
396.295 250.413 mo
396.295 264.428 384.933 275.79 370.918 275.79 cv
356.903 275.79 345.542 264.428 345.542 250.413 cv
345.542 236.398 356.903 225.036 370.918 225.036 cv
384.933 225.036 396.295 236.398 396.295 250.413 cv
.439216 .741176 .215686 rgb
f
388.415 250.413 mo
388.415 253.35 382.998 252.614 382.452 254.16 cv
381.906 255.706 385.563 260.498 384.527 261.715 cv
383.717 262.664 382.449 261.805 381.164 260.946 cv
379.96 260.14 378.741 259.335 377.87 260.018 cv
376.705 260.934 378.48 267.216 377.044 267.648 cv
375.689 268.055 372.406 262.125 370.918 262.125 cv
369.43 262.125 367.333 269.253 365.978 268.846 cv
364.542 268.414 365.183 260.838 363.966 260.018 cv
363.353 259.606 362.2 260.045 361.058 260.485 cv
359.81 260.966 358.575 261.447 358.076 260.814 cv
357.081 259.551 359.931 255.706 359.384 254.16 cv
358.838 252.614 353.421 253.441 353.421 250.413 cv
353.421 248.68 358.838 248.213 359.385 246.666 cv
359.931 245.12 356.314 240.374 357.31 239.112 cv
357.809 238.479 359.03 238.944 360.265 239.409 cv
361.394 239.834 362.534 240.259 363.146 239.846 cv
364.363 239.027 364.541 233.611 365.977 233.179 cv
367.332 232.771 369.43 239.848 370.918 239.848 cv
372.406 239.848 375.457 232.771 376.812 233.179 cv
378.248 233.611 376.225 240.492 377.441 241.312 cv
378.064 241.731 379.375 240.759 380.668 239.787 cv
382.038 238.758 383.387 237.729 383.879 238.352 cv
384.875 239.614 381.985 245.085 382.452 246.667 cv
383.221 249.272 388.415 248.68 388.415 250.413 cv
.313726 .501961 .164706 rgb
f
367.674 260.02 mo
367.337 258.594 366.754 257.395 365.622 256.632 cv
364.949 256.179 364.179 255.95 363.332 255.95 cv
363.102 255.95 362.873 255.967 362.646 255.997 cv
362.849 254.936 362.863 253.811 362.458 252.665 cv
362.094 251.634 361.509 250.933 360.834 250.44 cv
361.529 249.887 362.103 249.166 362.458 248.161 cv
362.974 246.699 362.803 245.288 362.361 243.917 cv
362.5 243.918 li
363.352 243.918 364.127 243.688 364.803 243.232 cv
365.73 242.608 366.323 241.662 366.75 240.608 cv
367.797 242.36 369.04 243.753 370.918 243.753 cv
372.14 243.753 373.125 243.15 374.027 242.205 cv
374.319 243.197 374.855 244.071 375.785 244.697 cv
376.386 245.102 377.083 245.316 377.801 245.316 cv
378.267 245.316 378.718 245.23 379.159 245.082 cv
379.018 246.057 379.03 247.001 379.309 247.945 cv
379.638 249.063 380.19 249.908 380.849 250.558 cv
380.237 251.047 379.714 251.717 379.379 252.665 cv
378.989 253.769 378.992 254.844 379.208 255.896 cv
379.018 255.871 378.824 255.857 378.627 255.857 cv
377.686 255.857 376.784 256.173 376.021 256.773 cv
375.002 257.573 374.506 258.679 374.284 259.884 cv
373.263 258.889 372.203 258.221 370.918 258.221 cv
369.56 258.221 368.533 258.951 367.674 260.02 cv
.070588 .270588 .023529 rgb
f
368.652 255.556 mo
368.171 254.908 367.604 254.366 366.947 253.923 cv
366.438 253.581 365.899 253.318 365.334 253.135 cv
365.247 252.565 365.107 252.009 364.917 251.469 cv
364.786 251.099 364.635 250.747 364.464 250.413 cv
364.636 250.077 364.787 249.725 364.916 249.358 cv
365.261 248.383 365.435 247.384 365.44 246.347 cv
365.675 246.226 365.905 246.09 366.129 245.94 cv
366.406 245.753 366.668 245.548 366.916 245.323 cv
367.928 246.184 369.252 246.876 370.918 246.876 cv
371.736 246.876 372.514 246.714 373.263 246.388 cv
373.62 246.77 374.02 247.11 374.46 247.407 cv
375.128 247.856 375.862 248.165 376.628 248.321 cv
376.675 248.539 376.73 248.754 376.794 248.968 cv
376.946 249.484 377.134 249.977 377.357 250.444 cv
377.192 250.769 377.047 251.111 376.92 251.469 cv
376.733 251.997 376.597 252.539 376.511 253.091 cv
375.813 253.334 375.149 253.699 374.539 254.179 cv
374.032 254.577 373.587 255.035 373.204 255.552 cv
372.529 255.277 371.768 255.098 370.918 255.098 cv
370.127 255.098 369.37 255.251 368.652 255.556 cv
.886275 .894118 .756863 rgb
f
370.918 278.913 mo
370.918 275.79 li
384.933 275.79 396.295 264.428 396.295 250.413 cv
396.295 236.398 384.933 225.036 370.918 225.036 cv
370.918 221.913 li
386.658 221.913 399.418 234.673 399.418 250.413 cv
399.418 266.153 386.658 278.913 370.918 278.913 cv
.2 .223529 .0666667 rgb
f
370.918 275.79 mo
370.918 262.125 li
372.357 262.125 375.473 267.668 376.902 267.668 cv
376.952 267.668 376.999 267.661 377.044 267.648 cv
378.48 267.216 376.705 260.934 377.87 260.018 cv
378.101 259.838 378.355 259.761 378.627 259.761 cv
379.384 259.761 380.278 260.353 381.164 260.946 cv
382.05 261.538 382.927 262.13 383.652 262.13 cv
383.979 262.13 384.275 262.01 384.527 261.715 cv
385.563 260.498 381.906 255.706 382.452 254.16 cv
382.998 252.614 388.415 253.35 388.415 250.413 cv
388.415 248.68 383.221 249.272 382.452 246.667 cv
381.985 245.085 384.875 239.614 383.879 238.352 cv
383.775 238.22 383.634 238.162 383.462 238.162 cv
382.818 238.162 381.749 238.975 380.668 239.787 cv
379.587 240.6 378.494 241.412 377.801 241.412 cv
377.664 241.412 377.543 241.38 377.441 241.312 cv
376.225 240.492 378.248 233.611 376.812 233.179 cv
376.774 233.167 376.735 233.162 376.695 233.162 cv
375.288 233.162 372.364 239.848 370.918 239.848 cv
370.918 225.036 li
384.933 225.036 396.295 236.398 396.295 250.413 cv
396.295 264.428 384.933 275.79 370.918 275.79 cv
.290196 .517647 .0823529 rgb
f
376.902 267.668 mo
375.473 267.668 372.357 262.125 370.918 262.125 cv
370.918 258.221 li
372.203 258.221 373.263 258.889 374.284 259.884 cv
374.506 258.679 375.002 257.573 376.021 256.773 cv
376.784 256.173 377.686 255.857 378.627 255.857 cv
378.824 255.857 379.018 255.871 379.208 255.896 cv
378.992 254.844 378.989 253.769 379.379 252.665 cv
379.714 251.717 380.237 251.047 380.849 250.558 cv
380.19 249.908 379.638 249.063 379.309 247.945 cv
379.03 247.001 379.018 246.057 379.159 245.082 cv
378.718 245.23 378.267 245.316 377.801 245.316 cv
377.083 245.316 376.386 245.102 375.785 244.697 cv
374.855 244.071 374.319 243.197 374.027 242.205 cv
373.125 243.15 372.14 243.753 370.918 243.753 cv
370.918 239.848 li
372.364 239.848 375.288 233.162 376.695 233.162 cv
376.735 233.162 376.774 233.167 376.812 233.179 cv
378.248 233.611 376.225 240.492 377.441 241.312 cv
377.543 241.38 377.664 241.412 377.801 241.412 cv
378.494 241.412 379.587 240.6 380.668 239.787 cv
381.749 238.975 382.818 238.162 383.462 238.162 cv
383.634 238.162 383.775 238.22 383.879 238.352 cv
384.875 239.614 381.985 245.085 382.452 246.667 cv
383.221 249.272 388.415 248.68 388.415 250.413 cv
388.415 253.35 382.998 252.614 382.452 254.16 cv
381.906 255.706 385.563 260.498 384.527 261.715 cv
384.275 262.01 383.979 262.13 383.652 262.13 cv
382.927 262.13 382.05 261.538 381.164 260.946 cv
380.278 260.353 379.384 259.761 378.627 259.761 cv
378.355 259.761 378.101 259.838 377.87 260.018 cv
376.705 260.934 378.48 267.216 377.044 267.648 cv
376.999 267.661 376.952 267.668 376.902 267.668 cv
.207843 .34902 .0627451 rgb
f
374.284 259.884 mo
373.263 258.889 372.203 258.221 370.918 258.221 cv
370.918 255.098 li
371.768 255.098 372.529 255.277 373.204 255.552 cv
373.587 255.035 374.032 254.577 374.539 254.179 cv
375.149 253.699 375.813 253.334 376.511 253.091 cv
376.597 252.539 376.733 251.997 376.92 251.469 cv
377.047 251.111 377.192 250.769 377.357 250.444 cv
377.134 249.977 376.946 249.484 376.794 248.968 cv
376.73 248.754 376.675 248.539 376.628 248.321 cv
375.862 248.165 375.128 247.856 374.46 247.407 cv
374.02 247.11 373.62 246.77 373.263 246.388 cv
372.514 246.714 371.736 246.876 370.918 246.876 cv
370.918 243.753 li
372.14 243.753 373.125 243.15 374.027 242.205 cv
374.319 243.197 374.855 244.071 375.785 244.697 cv
376.386 245.102 377.083 245.316 377.801 245.316 cv
378.267 245.316 378.718 245.23 379.159 245.082 cv
379.018 246.057 379.03 247.001 379.309 247.945 cv
379.638 249.063 380.19 249.908 380.849 250.558 cv
380.237 251.047 379.714 251.717 379.379 252.665 cv
378.989 253.769 378.992 254.844 379.208 255.896 cv
379.018 255.871 378.824 255.857 378.627 255.857 cv
377.686 255.857 376.784 256.173 376.021 256.773 cv
375.002 257.573 374.506 258.679 374.284 259.884 cv
.0470588 .188235 .00784314 rgb
f
373.204 255.552 mo
372.529 255.277 371.768 255.098 370.918 255.098 cv
370.918 246.876 li
371.736 246.876 372.514 246.714 373.263 246.388 cv
373.62 246.77 374.02 247.11 374.46 247.407 cv
375.128 247.856 375.862 248.165 376.628 248.321 cv
376.675 248.539 376.73 248.754 376.794 248.968 cv
376.946 249.484 377.134 249.977 377.357 250.444 cv
377.192 250.769 377.047 251.111 376.92 251.469 cv
376.733 251.997 376.597 252.539 376.511 253.091 cv
375.813 253.334 375.149 253.699 374.539 254.179 cv
374.032 254.577 373.587 255.035 373.204 255.552 cv
.588235 .623529 .286274 rgb
f
270.515 216.418 mo
272.632 277.041 li
265.176 277.301 258.697 264.83 258.151 249.199 cv
257.981 244.332 258.397 239.345 259.268 234.772 cv
259.462 233.734 259.687 232.726 259.923 231.747 cv
260.02 231.383 260.108 231.03 260.206 230.676 cv
260.48 229.646 260.776 228.655 261.103 227.713 cv
263.335 221.141 266.657 216.553 270.515 216.418 cv
cp
.996078 .807843 .223529 rgb
f
270.515 216.421 mo
277.966 216.161 284.589 232.622 285.135 248.257 cv
285.681 263.892 280.083 276.778 272.632 277.038 cv
270.515 216.421 li
cp
.890196 .705882 .12549 rgb
f
265.317 229.062 mo
265.346 229.89 266.04 230.538 266.868 230.509 cv
268.451 230.454 li
269.279 230.425 269.927 229.73 269.898 228.902 cv
269.869 228.074 269.174 227.426 268.346 227.455 cv
266.763 227.511 li
265.936 227.54 265.288 228.234 265.317 229.062 cv
cp
f
263.654 229.125 mo
263.682 229.945 263.037 230.648 262.207 230.677 cv
260.618 230.732 li
260.478 230.737 260.338 230.722 260.206 230.676 cv
260.48 229.646 260.776 228.655 261.103 227.713 cv
262.102 227.678 li
262.932 227.65 263.625 228.296 263.654 229.125 cv
cp
f
263.458 233.129 mo
263.486 233.957 264.181 234.605 265.009 234.576 cv
266.592 234.521 li
267.42 234.492 268.068 233.797 268.039 232.969 cv
268.01 232.141 267.315 231.494 266.487 231.523 cv
264.904 231.578 li
264.076 231.607 263.429 232.301 263.458 233.129 cv
cp
f
263.175 225.045 mo
263.204 225.873 263.899 226.521 264.727 226.492 cv
266.31 226.437 li
267.138 226.408 267.785 225.713 267.756 224.885 cv
267.727 224.057 267.033 223.41 266.205 223.439 cv
264.622 223.494 li
263.794 223.523 263.146 224.217 263.175 225.045 cv
cp
f
262.174 233.179 mo
262.203 233.999 261.557 234.702 260.727 234.721 cv
259.268 234.772 li
259.462 233.734 259.687 232.726 259.923 231.747 cv
260.623 231.723 li
261.452 231.704 262.145 232.35 262.174 233.179 cv
cp
f
273.088 232.793 mo
273.116 233.621 273.811 234.269 274.639 234.24 cv
276.222 234.185 li
277.05 234.156 277.698 233.461 277.669 232.633 cv
277.64 231.805 276.945 231.158 276.117 231.186 cv
274.534 231.242 li
273.706 231.271 273.059 231.965 273.088 232.793 cv
cp
.996078 .807843 .223529 rgb
f
265.114 237.574 mo
265.143 238.402 265.837 239.05 266.665 239.021 cv
268.248 238.966 li
269.076 238.937 269.724 238.242 269.695 237.414 cv
269.666 236.587 268.971 235.939 268.143 235.968 cv
266.56 236.023 li
265.732 236.052 265.085 236.746 265.114 237.574 cv
cp
.890196 .705882 .12549 rgb
f
259.367 237.775 mo
259.396 238.603 260.091 239.251 260.919 239.222 cv
262.502 239.167 li
263.329 239.138 263.977 238.443 263.948 237.615 cv
263.919 236.787 263.225 236.139 262.397 236.168 cv
260.814 236.224 li
259.986 236.253 259.338 236.947 259.367 237.775 cv
cp
f
272.441 259.199 mo
268.327 273.543 268.436 286.158 272.683 287.376 cv
276.93 288.594 283.708 277.953 287.821 263.609 cv
291.934 249.265 287.578 235.432 287.578 235.432 cv
287.578 235.432 276.554 244.855 272.441 259.199 cv
cp
.376471 .580392 .231373 rgb
f
270.96 259.25 mo
276.063 273.273 276.835 285.865 272.683 287.376 cv
268.531 288.887 261.028 278.745 255.925 264.723 cv
250.821 250.701 254.201 236.597 254.201 236.597 cv
254.201 236.597 265.856 245.228 270.96 259.25 cv
cp
.521569 .760784 .345098 rgb
f
71.9011 341.103 mo
75.8485 345.05 75.1909 352.108 75.1909 352.108 cv
75.1909 352.108 68.1333 352.766 64.1859 348.818 cv
60.2385 344.871 60.8962 337.813 60.8962 337.813 cv
60.8962 337.813 67.9537 337.155 71.9011 341.103 cv
cp
.278431 .611765 .341176 rgb
f
78.4806 341.103 mo
74.5332 345.05 75.1909 352.108 75.1909 352.108 cv
75.1909 352.108 82.2484 352.766 86.1958 348.818 cv
90.1432 344.871 89.4855 337.813 89.4855 337.813 cv
89.4855 337.813 82.428 337.155 78.4806 341.103 cv
cp
.223529 .490196 .27451 rgb
f
75.1909 352.108 mo
75.1909 352.108 69.7354 347.582 69.7354 342 cv
69.7354 336.418 75.1909 331.892 75.1909 331.892 cv
75.1909 352.108 li
cp
f
75.1909 331.892 mo
75.1909 331.892 80.6463 336.418 80.6463 342 cv
80.6463 347.582 75.1909 352.108 75.1909 352.108 cv
75.1909 331.892 li
cp
.278431 .611765 .341176 rgb
f
75.1909 397.73 mo
63.3802 397.73 51.6909 380.13 51.6909 367.152 cv
51.6909 354.173 62.2122 350.73 75.1909 350.73 cv
75.1909 397.73 li
cp
.921569 .129412 .129412 rgb
f
75.1909 350.73 mo
88.1695 350.73 98.6909 354.173 98.6909 367.152 cv
98.6909 380.13 87.0015 397.73 75.1909 397.73 cv
75.1909 350.73 li
cp
.74902 .105882 .105882 rgb
f
63.4929 360.667 mo
63.4929 361.827 62.1489 362.767 62.1489 362.767 cv
62.1489 362.767 60.8049 361.827 60.8049 360.667 cv
60.8049 359.507 61.4066 358.567 62.1489 358.567 cv
62.8912 358.567 63.4929 359.507 63.4929 360.667 cv
cp
.996078 .807843 .223529 rgb
f
72.3262 360.667 mo
72.3262 361.827 70.9822 362.767 70.9822 362.767 cv
70.9822 362.767 69.6382 361.827 69.6382 360.667 cv
69.6382 359.507 70.2399 358.567 70.9822 358.567 cv
71.7245 358.567 72.3262 359.507 72.3262 360.667 cv
cp
f
68.3914 370.167 mo
68.3914 371.327 67.0474 372.267 67.0474 372.267 cv
67.0474 372.267 65.7034 371.327 65.7034 370.167 cv
65.7034 369.007 66.3051 368.067 67.0474 368.067 cv
67.7896 368.067 68.3914 369.007 68.3914 370.167 cv
cp
f
59.7529 370.167 mo
59.7529 371.327 58.4089 372.267 58.4089 372.267 cv
58.4089 372.267 57.0649 371.327 57.0649 370.167 cv
57.0649 369.007 57.6666 368.067 58.4089 368.067 cv
59.1512 368.067 59.7529 369.007 59.7529 370.167 cv
cp
f
90.6288 370.167 mo
90.6288 371.327 91.9728 372.267 91.9728 372.267 cv
91.9728 372.267 93.3168 371.327 93.3168 370.167 cv
93.3168 369.007 92.7151 368.067 91.9728 368.067 cv
91.2305 368.067 90.6288 369.007 90.6288 370.167 cv
cp
.811765 .639216 .0901961 rgb
f
76.5349 370.167 mo
76.5349 371.327 75.1909 372.267 75.1909 372.267 cv
75.1909 372.267 73.8469 371.327 73.8469 370.167 cv
73.8469 369.007 74.4486 368.067 75.1909 368.067 cv
75.9331 368.067 76.5349 369.007 76.5349 370.167 cv
cp
.996078 .807843 .223529 rgb
f
76.5349 390.333 mo
76.5349 391.493 75.1909 392.433 75.1909 392.433 cv
75.1909 392.433 73.8469 391.493 73.8469 390.333 cv
73.8469 389.173 74.4486 388.233 75.1909 388.233 cv
75.9331 388.233 76.5349 389.173 76.5349 390.333 cv
cp
f
68.3914 388.333 mo
68.3914 389.493 67.0474 390.433 67.0474 390.433 cv
67.0474 390.433 65.7034 389.493 65.7034 388.333 cv
65.7034 387.173 66.3051 386.233 67.0474 386.233 cv
67.7896 386.233 68.3914 387.173 68.3914 388.333 cv
cp
f
81.9903 388.333 mo
81.9903 389.493 83.3343 390.433 83.3343 390.433 cv
83.3343 390.433 84.6783 389.493 84.6783 388.333 cv
84.6783 387.173 84.0766 386.233 83.3343 386.233 cv
82.5921 386.233 81.9903 387.173 81.9903 388.333 cv
cp
.811765 .639216 .0901961 rgb
f
84.6783 370.167 mo
84.6783 371.327 83.3343 372.267 83.3343 372.267 cv
83.3343 372.267 81.9903 371.327 81.9903 370.167 cv
81.9903 369.007 82.5921 368.067 83.3343 368.067 cv
84.0766 368.067 84.6783 369.007 84.6783 370.167 cv
cp
f
81.1595 360.667 mo
81.1595 361.827 79.8155 362.767 79.8155 362.767 cv
79.8155 362.767 78.4715 361.827 78.4715 360.667 cv
78.4715 359.507 79.0733 358.567 79.8155 358.567 cv
80.5578 358.567 81.1595 359.507 81.1595 360.667 cv
cp
f
89.9929 360.667 mo
89.9929 361.827 88.6489 362.767 88.6489 362.767 cv
88.6489 362.767 87.3049 361.827 87.3049 360.667 cv
87.3049 359.507 87.9066 358.567 88.6489 358.567 cv
89.3912 358.567 89.9929 359.507 89.9929 360.667 cv
cp
f
63.4929 379.667 mo
63.4929 380.827 62.1489 381.767 62.1489 381.767 cv
62.1489 381.767 60.8049 380.827 60.8049 379.667 cv
60.8049 378.507 61.4066 377.567 62.1489 377.567 cv
62.8912 377.567 63.4929 378.507 63.4929 379.667 cv
cp
.996078 .807843 .223529 rgb
f
89.9929 379.667 mo
89.9929 380.827 88.6489 381.767 88.6489 381.767 cv
88.6489 381.767 87.3049 380.827 87.3049 379.667 cv
87.3049 378.507 87.9066 377.567 88.6489 377.567 cv
89.3912 377.567 89.9929 378.507 89.9929 379.667 cv
cp
.811765 .639216 .0901961 rgb
f
72.3262 379.667 mo
72.3262 380.827 70.9822 381.767 70.9822 381.767 cv
70.9822 381.767 69.6382 380.827 69.6382 379.667 cv
69.6382 378.507 70.2399 377.567 70.9822 377.567 cv
71.7245 377.567 72.3262 378.507 72.3262 379.667 cv
cp
.996078 .807843 .223529 rgb
f
81.1595 379.667 mo
81.1595 380.827 79.8155 381.767 79.8155 381.767 cv
79.8155 381.767 78.4715 380.827 78.4715 379.667 cv
78.4715 378.507 79.0733 377.567 79.8155 377.567 cv
80.5578 377.567 81.1595 378.507 81.1595 379.667 cv
cp
.811765 .639216 .0901961 rgb
f
188.206 345.006 mo
186.523 351.758 183.999 356.942 182.569 356.586 cv
181.14 356.229 181.345 350.467 183.029 343.715 cv
184.712 336.963 187.236 331.778 188.666 332.135 cv
190.095 332.491 189.889 338.254 188.206 345.006 cv
.278431 .611765 .341176 rgb
f
189.78 345.914 mo
184.774 350.748 181.546 355.526 182.569 356.586 cv
183.593 357.646 188.48 354.586 193.486 349.752 cv
198.492 344.918 201.72 340.14 200.696 339.081 cv
199.673 338.021 194.785 341.08 189.78 345.914 cv
.223529 .490196 .27451 rgb
f
182.569 356.586 mo
181.293 355.849 184.045 348.694 188.715 340.605 cv
193.386 332.515 198.206 326.555 199.482 327.292 cv
182.569 356.586 li
f
199.482 327.292 mo
200.758 328.028 198.007 335.183 193.336 343.273 cv
188.666 351.362 183.845 357.323 182.569 356.586 cv
199.482 327.292 li
.278431 .611765 .341176 rgb
f
190.455 388.437 mo
195.758 377 180.744 366.779 188.914 352.629 cv
184.038 354.042 li
182.824 349.113 li
174.654 363.263 158.295 355.371 151.042 365.682 cv
145.007 374.262 148.642 388.006 160.482 394.842 cv
172.323 401.678 186.042 397.954 190.455 388.437 cv
.997725 .888549 .549647 rgb
f
gsave
190.455 388.437 mo
195.758 377 180.744 366.779 188.914 352.629 cv
184.038 354.042 li
182.824 349.113 li
174.654 363.263 158.295 355.371 151.042 365.682 cv
145.007 374.262 148.642 388.006 160.482 394.842 cv
172.323 401.678 186.042 397.954 190.455 388.437 cv
clp
173.193 399.346 mo
168.722 399.346 164.144 398.11 159.982 395.708 cv
160.982 393.976 li
163.926 395.675 167.09 396.744 170.257 397.154 cv
173.423 397.564 176.593 397.316 179.55 396.382 cv
184.175 394.918 187.726 391.946 189.548 388.016 cv
191.799 383.16 190.053 378.398 188.203 373.356 cv
185.943 367.195 183.381 360.211 188.047 352.129 cv
189.78 353.129 li
185.581 360.401 187.869 366.637 190.081 372.668 cv
191.989 377.87 193.962 383.249 191.362 388.857 cv
189.301 393.304 185.32 396.653 180.153 398.288 cv
177.917 398.996 175.57 399.346 173.193 399.346 cv
.921569 .760784 .266667 rgb
f
188.562 352.426 mo
184.377 359.673 185.005 365.022 185.564 370.072 cv
185.633 370.69 185.7 371.31 185.753 371.933 cv
186.073 375.706 186.033 379.589 183.618 384.14 cv
183.423 384.507 183.217 384.87 183.004 385.232 cv
180.761 389.052 177.63 392.331 174.046 394.45 cv
172.356 395.449 170.632 396.123 168.951 396.502 cv
165.786 397.212 162.743 396.84 160.182 395.362 cv
160.782 394.322 li
162.524 395.327 164.529 395.726 166.649 395.528 cv
168.771 395.333 171.007 394.543 173.21 393.168 cv
173.394 393.054 173.576 392.935 173.757 392.814 cv
176.968 390.662 179.699 387.476 181.485 383.753 cv
181.759 383.181 181.992 382.613 182.195 382.05 cv
183.73 377.795 183.338 374.147 182.986 370.41 cv
182.92 369.716 182.863 369.013 182.817 368.299 cv
182.518 363.654 182.756 358.482 186.829 351.426 cv
188.562 352.426 li
f
187.344 351.723 mo
183.174 358.945 182.131 363.433 181.048 367.475 cv
180.913 367.978 180.774 368.476 180.622 368.973 cv
179.68 372.035 178.468 375.131 175.873 379.422 cv
175.659 379.774 175.44 380.129 175.218 380.488 cv
172.913 384.239 170.391 387.853 167.938 390.613 cv
166.799 391.895 165.695 392.901 164.709 393.658 cv
162.85 395.079 161.343 395.569 160.382 395.015 cv
160.582 394.669 li
161.122 394.98 161.968 394.708 163.042 393.903 cv
164.118 393.102 165.421 391.769 166.87 389.955 cv
166.991 389.804 167.112 389.65 167.234 389.493 cv
169.387 386.726 171.576 383.216 173.422 379.491 cv
173.702 378.925 173.959 378.365 174.203 377.814 cv
176.084 373.568 176.857 370.465 177.768 367.464 cv
177.942 366.893 178.133 366.327 178.334 365.754 cv
179.66 361.974 181.507 357.833 185.611 350.723 cv
187.344 351.723 li
f
186.126 351.019 mo
181.97 358.218 179.213 361.852 176.531 364.879 cv
176.188 365.267 175.842 365.643 175.49 366.012 cv
173.246 368.368 170.898 370.671 168.128 374.704 cv
167.896 375.042 167.663 375.388 167.432 375.745 cv
165.065 379.426 163.14 383.352 161.83 386.775 cv
161.236 388.329 160.758 389.678 160.466 390.814 cv
159.914 392.946 159.942 394.299 160.582 394.669 cv
160.382 395.015 li
159.72 394.632 159.407 393.69 159.434 392.277 cv
159.466 390.871 159.835 388.996 160.53 386.741 cv
160.588 386.554 160.648 386.364 160.71 386.172 cv
161.806 382.789 163.452 378.955 165.359 375.229 cv
165.645 374.668 165.926 374.116 166.21 373.578 cv
168.445 369.343 170.426 366.779 172.551 364.517 cv
172.972 364.069 173.41 363.641 173.851 363.21 cv
176.841 360.293 180.257 357.184 184.393 350.019 cv
186.126 351.019 li
f
184.908 350.316 mo
180.766 357.49 176.273 360.23 172.015 362.283 cv
171.459 362.55 170.907 362.804 170.359 363.052 cv
166.796 364.664 163.323 366.207 160.383 369.986 cv
160.132 370.31 159.885 370.647 159.646 371.001 cv
157.216 374.614 155.862 378.849 155.723 382.937 cv
155.661 384.763 155.82 386.455 156.224 387.97 cv
156.978 390.813 158.541 393.028 160.782 394.322 cv
160.182 395.362 li
158.318 394.285 156.846 392.672 155.827 390.652 cv
154.813 388.64 154.248 386.222 154.19 383.527 cv
154.185 383.303 154.184 383.078 154.186 382.851 cv
154.226 378.853 155.329 374.695 157.296 370.967 cv
157.588 370.412 157.894 369.869 158.217 369.342 cv
160.81 365.122 164.012 363.136 167.333 361.571 cv
168.006 361.254 168.688 360.96 169.369 360.666 cv
174.036 358.648 179.008 356.535 183.175 349.316 cv
184.908 350.316 li
f
159.982 395.708 mo
153.609 392.028 149.118 386.132 147.662 379.53 cv
146.495 374.237 147.405 369.115 150.225 365.106 cv
153.781 360.051 159.426 359.07 164.886 358.122 cv
171.215 357.023 177.759 355.886 181.957 348.613 cv
183.69 349.613 li
179.023 357.695 171.694 358.969 165.228 360.092 cv
159.937 361.012 154.94 361.879 151.86 366.257 cv
149.368 369.801 148.57 374.361 149.615 379.1 cv
150.951 385.154 155.094 390.576 160.982 393.976 cv
159.982 395.708 li
f
grestore
173.192 397.345 mo
172.218 397.345 171.237 397.281 170.257 397.154 cv
169.445 397.049 168.634 396.901 167.827 396.709 cv
168.199 396.656 168.574 396.586 168.951 396.502 cv
170.632 396.123 172.356 395.449 174.046 394.45 cv
177.63 392.331 180.761 389.052 183.004 385.232 cv
183.217 384.87 183.423 384.507 183.618 384.14 cv
186.033 379.589 186.073 375.706 185.753 371.933 cv
185.7 371.31 185.633 370.69 185.564 370.072 cv
185.245 367.188 184.903 364.207 185.448 360.83 cv
185.273 365.369 186.797 369.522 188.203 373.356 cv
190.053 378.398 191.799 383.16 189.548 388.016 cv
187.726 391.946 184.175 394.918 179.55 396.382 cv
177.509 397.027 175.366 397.345 173.192 397.345 cv
165.608 395.577 mo
165.043 395.577 164.487 395.533 163.946 395.445 cv
163.53 395.271 163.118 395.085 162.709 394.888 cv
163.314 394.624 163.985 394.211 164.709 393.658 cv
165.695 392.901 166.799 391.895 167.938 390.613 cv
170.391 387.853 172.913 384.239 175.218 380.488 cv
175.44 380.129 175.659 379.774 175.873 379.422 cv
178.468 375.131 179.68 372.035 180.622 368.973 cv
180.774 368.476 180.913 367.978 181.048 367.475 cv
181.65 365.23 182.239 362.846 183.359 359.932 cv
182.65 363.031 182.652 365.745 182.817 368.299 cv
182.863 369.013 182.92 369.716 182.986 370.41 cv
183.338 374.147 183.73 377.795 182.195 382.05 cv
181.992 382.613 181.759 383.181 181.485 383.753 cv
179.699 387.476 176.968 390.662 173.757 392.814 cv
173.576 392.935 173.394 393.054 173.21 393.168 cv
171.007 394.543 168.771 395.333 166.649 395.528 cv
166.299 395.561 165.951 395.577 165.608 395.577 cv
162.018 394.543 mo
161.67 394.362 161.325 394.173 160.982 393.976 cv
160.982 393.976 li
160.982 393.976 li
181.108 359.117 li
179.871 361.681 179.031 363.768 178.334 365.754 cv
178.133 366.327 177.942 366.893 177.768 367.464 cv
176.857 370.465 176.084 373.568 174.203 377.814 cv
173.959 378.365 173.702 378.925 173.422 379.491 cv
171.576 383.216 169.387 386.726 167.234 389.493 cv
167.112 389.65 166.991 389.804 166.87 389.955 cv
165.421 391.769 164.118 393.102 163.042 393.903 cv
162.672 394.18 162.33 394.394 162.018 394.543 cv
188.914 352.629 mo
188.914 352.629 li
188.914 352.629 li
188.914 352.629 li
.847059 .678431 .258824 rgb
f
173.182 398.343 mo
170.391 398.343 167.486 397.845 164.614 396.784 cv
165.037 396.829 165.465 396.851 165.899 396.851 cv
166.532 396.851 167.176 396.804 167.827 396.709 cv
168.634 396.901 169.445 397.049 170.257 397.154 cv
171.237 397.281 172.218 397.345 173.192 397.345 cv
175.366 397.345 177.509 397.027 179.55 396.382 cv
184.175 394.918 187.726 391.946 189.548 388.016 cv
191.799 383.16 190.053 378.398 188.203 373.356 cv
186.797 369.522 185.273 365.369 185.448 360.83 cv
185.841 358.394 186.696 355.752 188.354 352.791 cv
188.914 352.629 li
188.914 352.629 li
187.095 355.78 186.425 358.736 186.425 361.553 cv
186.423 369.408 191.621 376.189 191.619 383.129 cv
191.619 384.882 191.286 386.644 190.455 388.437 cv
187.594 394.608 180.82 398.343 173.182 398.343 cv
163.946 395.445 mo
163.394 395.354 162.856 395.218 162.335 395.035 cv
162.457 394.993 162.581 394.944 162.709 394.888 cv
163.118 395.085 163.53 395.271 163.946 395.445 cv
161.556 394.721 mo
161.293 394.601 161.035 394.468 160.782 394.322 cv
160.982 393.976 li
160.982 393.976 li
161.325 394.173 161.67 394.362 162.018 394.543 cv
161.856 394.62 161.702 394.679 161.556 394.721 cv
.784314 .580392 .12549 rgb
f
165.899 396.851 mo
165.465 396.851 165.037 396.829 164.614 396.784 cv
163.464 396.36 162.319 395.845 161.189 395.236 cv
161.217 395.237 161.245 395.238 161.273 395.238 cv
161.595 395.238 161.951 395.17 162.335 395.035 cv
162.856 395.218 163.394 395.354 163.946 395.445 cv
164.487 395.533 165.043 395.577 165.608 395.577 cv
165.951 395.577 166.299 395.561 166.649 395.528 cv
168.771 395.333 171.007 394.543 173.21 393.168 cv
173.394 393.054 173.576 392.935 173.757 392.814 cv
176.968 390.662 179.699 387.476 181.485 383.753 cv
181.759 383.181 181.992 382.613 182.195 382.05 cv
183.73 377.795 183.338 374.147 182.986 370.41 cv
182.92 369.716 182.863 369.013 182.817 368.299 cv
182.652 365.745 182.65 363.031 183.359 359.932 cv
184.099 358.007 185.071 355.85 186.432 353.348 cv
188.354 352.791 li
186.696 355.752 185.841 358.394 185.448 360.83 cv
184.903 364.207 185.245 367.188 185.564 370.072 cv
185.633 370.69 185.7 371.31 185.753 371.933 cv
186.073 375.706 186.033 379.589 183.618 384.14 cv
183.423 384.507 183.217 384.87 183.004 385.232 cv
180.761 389.052 177.63 392.331 174.046 394.45 cv
172.356 395.449 170.632 396.123 168.951 396.502 cv
168.574 396.586 168.199 396.656 167.827 396.709 cv
167.176 396.804 166.532 396.851 165.899 396.851 cv
161.085 394.794 mo
160.896 394.794 160.728 394.753 160.582 394.669 cv
160.582 394.669 li
160.582 394.669 li
160.782 394.322 li
161.035 394.468 161.293 394.601 161.556 394.721 cv
161.387 394.77 161.23 394.794 161.085 394.794 cv
f
161.273 395.238 mo
161.245 395.238 161.217 395.237 161.189 395.236 cv
160.953 395.109 160.717 394.977 160.482 394.842 cv
160.577 394.679 li
160.582 394.669 li
160.582 394.669 li
160.728 394.753 160.896 394.794 161.085 394.794 cv
161.23 394.794 161.387 394.77 161.556 394.721 cv
161.702 394.679 161.856 394.62 162.018 394.543 cv
162.33 394.394 162.672 394.18 163.042 393.903 cv
164.118 393.102 165.421 391.769 166.87 389.955 cv
166.991 389.804 167.112 389.65 167.234 389.493 cv
169.387 386.726 171.576 383.216 173.422 379.491 cv
173.702 378.925 173.959 378.365 174.203 377.814 cv
176.084 373.568 176.857 370.465 177.768 367.464 cv
177.942 366.893 178.133 366.327 178.334 365.754 cv
179.031 363.768 179.871 361.681 181.108 359.117 cv
181.385 358.637 li
182.31 357.286 183.305 355.743 184.401 353.936 cv
186.432 353.348 li
185.071 355.85 184.099 358.007 183.359 359.932 cv
182.239 362.846 181.65 365.23 181.048 367.475 cv
180.913 367.978 180.774 368.476 180.622 368.973 cv
179.68 372.035 178.468 375.131 175.873 379.422 cv
175.659 379.774 175.44 380.129 175.218 380.488 cv
172.913 384.239 170.391 387.853 167.938 390.613 cv
166.799 391.895 165.695 392.901 164.709 393.658 cv
163.985 394.211 163.314 394.624 162.709 394.888 cv
162.581 394.944 162.457 394.993 162.335 395.035 cv
161.951 395.17 161.595 395.238 161.273 395.238 cv
f
160.577 394.679 mo
160.582 394.669 li
160.582 394.669 li
160.582 394.669 li
160.577 394.679 li
181.385 358.637 mo
184.038 354.042 li
184.401 353.936 li
183.305 355.743 182.31 357.286 181.385 358.637 cv
f
160.482 394.842 mo
160.482 394.842 li
160.982 393.975 li
160.982 393.976 160.982 393.976 160.982 393.976 cv
160.982 393.976 li
160.782 394.322 li
160.582 394.669 li
160.577 394.679 li
160.482 394.842 li
f
271.346 360.667 mo
271.346 392.385 li
274.485 392.385 li
279.455 392.385 283.485 388.356 283.485 383.385 cv
283.485 360.667 li
271.346 360.667 li
cp
.611765 .592157 .490196 rgb
f
259.207 360.667 mo
259.207 383.385 li
259.207 388.356 263.236 392.385 268.207 392.385 cv
271.346 392.385 li
271.346 360.667 li
259.207 360.667 li
cp
.729412 .705882 .584314 rgb
f
271.346 366.486 mo
256.71 366.486 244.846 367.11 244.846 356.928 cv
244.846 346.747 256.71 338.494 271.346 338.494 cv
271.346 366.486 li
cp
.431373 .262745 .160784 rgb
f
271.346 338.494 mo
285.981 338.494 297.846 346.747 297.846 356.928 cv
297.846 367.11 285.981 366.486 271.346 366.486 cv
271.346 338.494 li
cp
.388235 .223529 .129412 rgb
f
290.588 380.848 mo
290.588 394.385 li
291.928 394.385 li
294.049 394.385 295.769 392.665 295.769 390.544 cv
295.769 380.848 li
290.588 380.848 li
cp
.611765 .592157 .490196 rgb
f
285.407 380.848 mo
285.407 390.544 li
285.407 392.665 287.127 394.385 289.248 394.385 cv
290.588 394.385 li
290.588 380.848 li
285.407 380.848 li
cp
.729412 .705882 .584314 rgb
f
290.588 383.332 mo
284.342 383.332 279.278 383.598 279.278 379.253 cv
279.278 374.908 284.342 371.385 290.588 371.385 cv
290.588 383.332 li
cp
.431373 .262745 .160784 rgb
f
290.588 371.385 mo
296.834 371.385 301.898 374.908 301.898 379.253 cv
301.898 383.598 296.834 383.332 290.588 383.332 cv
290.588 371.385 li
cp
.388235 .223529 .129412 rgb
f
96.0513 40.4009 mo
107.172 40.4009 li
107.172 43.748 li
100.046 43.748 li
100.046 47.8237 li
106.12 47.8237 li
106.12 51.1709 li
100.046 51.1709 li
100.046 58 li
96.0513 58 li
96.0513 40.4009 li
cp
.521569 .760784 .345098 rgb
f
114.167 48.4985 mo
116.192 48.4985 li
118.27 48.4985 119.404 47.6079 119.404 45.8804 cv
119.404 44.1528 118.27 43.5591 116.192 43.5591 cv
114.167 43.5591 li
114.167 48.4985 li
cp
119.701 58 mo
116.327 51.6567 li
114.167 51.6567 li
114.167 58 li
110.172 58 li
110.172 40.4009 li
116.516 40.4009 li
120.241 40.4009 123.318 41.6963 123.318 45.8804 cv
123.318 48.4717 122.049 50.1182 120.187 50.9551 cv
124.155 58 li
119.701 58 li
cp
f
126.696 40.4009 mo
130.664 40.4009 li
130.664 50.2529 li
130.664 53.708 131.744 54.896 133.714 54.896 cv
135.685 54.896 136.845 53.708 136.845 50.2529 cv
136.845 40.4009 li
140.678 40.4009 li
140.678 49.8481 li
140.678 55.7598 138.276 58.3237 133.714 58.3237 cv
129.152 58.3237 126.696 55.7598 126.696 49.8481 cv
126.696 40.4009 li
cp
f
144.678 40.4009 mo
148.673 40.4009 li
148.673 58 li
144.678 58 li
144.678 40.4009 li
cp
f
156.232 43.748 mo
151.374 43.748 li
151.374 40.4009 li
165.032 40.4009 li
165.032 43.748 li
160.201 43.748 li
160.201 58 li
156.232 58 li
156.232 43.748 li
cp
f
168.248 53.0605 mo
169.49 54.1401 171.109 54.896 172.567 54.896 cv
174.214 54.896 175.023 54.248 175.023 53.1953 cv
175.023 52.0884 174.025 51.7378 172.486 51.0898 cv
170.219 50.1182 li
168.383 49.3892 166.656 47.8779 166.656 45.3135 cv
166.656 42.3979 169.274 40.0767 172.918 40.0767 cv
174.942 40.0767 177.075 40.8867 178.586 42.3979 cv
176.589 44.9087 li
175.428 44.0176 174.322 43.5049 172.918 43.5049 cv
171.568 43.5049 170.678 44.0986 170.678 45.0977 cv
170.678 46.1772 171.838 46.5552 173.377 47.1758 cv
175.617 48.0938 li
177.749 48.9575 179.1 50.3882 179.1 52.8716 cv
179.1 55.7866 176.67 58.3237 172.486 58.3237 cv
170.192 58.3237 167.762 57.46 165.954 55.7866 cv
168.248 53.0605 li
cp
f
192.249 46.771 mo
193.518 46.0151 194.49 45.2593 194.49 44.0718 cv
194.49 43.2349 194.112 42.6953 193.275 42.6953 cv
192.385 42.6953 191.683 43.4507 191.683 44.6655 cv
191.683 45.3135 191.899 46.042 192.249 46.771 cv
cp
192.654 55.3008 mo
193.383 55.3008 194.139 55.0576 194.895 54.5991 cv
193.518 53.4922 192.249 52.2505 191.224 50.9551 cv
190.522 51.5757 190.036 52.2505 190.036 53.0605 cv
190.036 54.3828 191.089 55.3008 192.654 55.3008 cv
cp
202.183 58.3237 mo
200.726 58.0269 199.186 57.4063 197.675 56.5425 cv
196.19 57.6489 194.355 58.3237 192.142 58.3237 cv
188.309 58.3237 186.284 56.0024 186.284 53.3032 cv
186.284 50.8467 187.769 49.4434 189.496 48.3364 cv
188.821 47.0679 188.416 45.7993 188.416 44.6924 cv
188.416 42.1821 190.252 40.0767 193.194 40.0767 cv
195.84 40.0767 197.513 41.6426 197.513 44.0718 cv
197.513 46.3662 195.678 47.8237 193.842 49.0654 cv
194.841 50.2261 196.082 51.333 197.378 52.2773 cv
198.269 51.1167 198.971 49.7134 199.403 48.0664 cv
203.019 48.0664 li
202.372 50.1992 201.427 52.1694 200.078 54.0049 cv
201.184 54.5718 202.237 54.9766 203.128 55.1118 cv
202.183 58.3237 li
cp
f
209.018 40.4009 mo
213.229 40.4009 li
215.361 48.6064 li
215.874 50.5229 216.225 52.3047 216.765 54.248 cv
216.873 54.248 li
217.413 52.3047 217.764 50.5229 218.276 48.6064 cv
220.354 40.4009 li
224.431 40.4009 li
219.113 58 li
214.335 58 li
209.018 40.4009 li
cp
f
226.27 40.4009 mo
237.31 40.4009 li
237.31 43.748 li
230.266 43.748 li
230.266 47.2837 li
236.258 47.2837 li
236.258 50.604 li
230.266 50.604 li
230.266 54.6528 li
237.58 54.6528 li
237.58 58 li
226.27 58 li
226.27 40.4009 li
cp
f
248.84 40.0767 mo
251.323 40.0767 253.132 41.1836 254.32 42.3711 cv
252.134 44.8276 li
251.242 44.0176 250.406 43.5049 248.894 43.5049 cv
246.195 43.5049 244.252 45.6372 244.252 49.1733 cv
244.252 52.7905 245.898 54.896 249.218 54.896 cv
249.92 54.896 250.648 54.707 251.081 54.356 cv
251.081 51.333 li
248.165 51.333 li
248.165 48.0938 li
254.617 48.0938 li
254.617 56.1914 li
253.348 57.2983 251.162 58.3237 248.705 58.3237 cv
243.955 58.3237 240.176 55.2197 240.176 49.3081 cv
240.176 43.478 244.062 40.0767 248.84 40.0767 cv
cp
f
258.185 40.4009 mo
269.225 40.4009 li
269.225 43.748 li
262.18 43.748 li
262.18 47.2837 li
268.172 47.2837 li
268.172 50.604 li
262.18 50.604 li
262.18 54.6528 li
269.494 54.6528 li
269.494 58 li
258.185 58 li
258.185 40.4009 li
cp
f
276.382 43.748 mo
271.522 43.748 li
271.522 40.4009 li
285.182 40.4009 li
285.182 43.748 li
280.35 43.748 li
280.35 58 li
276.382 58 li
276.382 43.748 li
cp
f
294.308 50.7119 mo
293.876 49.0923 li
293.39 47.3379 292.931 45.2593 292.445 43.4238 cv
292.337 43.4238 li
291.933 45.2866 291.446 47.3379 290.961 49.0923 cv
290.528 50.7119 li
294.308 50.7119 li
cp
295.117 53.8159 mo
289.719 53.8159 li
288.64 58 li
284.591 58 li
290.124 40.4009 li
294.875 40.4009 li
300.408 58 li
296.197 58 li
295.117 53.8159 li
cp
f
308.456 54.9229 mo
310.615 54.9229 311.749 54.1133 311.749 52.5205 cv
311.749 50.9819 310.643 50.3071 308.456 50.3071 cv
306.242 50.3071 li
306.242 54.9229 li
308.456 54.9229 li
cp
308.078 47.5 mo
310.021 47.5 310.886 46.6631 310.886 45.3403 cv
310.886 44.0176 309.968 43.478 308.132 43.478 cv
306.242 43.478 li
306.242 47.5 li
308.078 47.5 li
cp
302.248 40.4009 mo
308.268 40.4009 li
311.938 40.4009 314.772 41.3994 314.772 44.7734 cv
314.772 46.3389 313.854 48.0396 311.803 48.5796 cv
311.803 48.6875 li
314.313 49.1465 315.636 50.4692 315.636 52.8174 cv
315.636 56.4072 312.613 58 308.78 58 cv
302.248 58 li
302.248 40.4009 li
cp
f
318.556 40.4009 mo
322.551 40.4009 li
322.551 54.6528 li
329.487 54.6528 li
329.487 58 li
318.556 58 li
318.556 40.4009 li
cp
f
332.487 40.4009 mo
343.527 40.4009 li
343.527 43.748 li
336.482 43.748 li
336.482 47.2837 li
342.475 47.2837 li
342.475 50.604 li
336.482 50.604 li
336.482 54.6528 li
343.797 54.6528 li
343.797 58 li
332.487 58 li
332.487 40.4009 li
cp
f
348.39 53.0605 mo
349.632 54.1401 351.251 54.896 352.709 54.896 cv
354.355 54.896 355.165 54.248 355.165 53.1953 cv
355.165 52.0884 354.166 51.7378 352.628 51.0898 cv
350.36 50.1182 li
348.524 49.3892 346.797 47.8779 346.797 45.3135 cv
346.797 42.3979 349.416 40.0767 353.06 40.0767 cv
355.084 40.0767 357.217 40.8867 358.728 42.3979 cv
356.73 44.9087 li
355.57 44.0176 354.463 43.5049 353.06 43.5049 cv
351.71 43.5049 350.819 44.0986 350.819 45.0977 cv
350.819 46.1772 351.979 46.5552 353.519 47.1758 cv
355.759 48.0938 li
357.892 48.9575 359.241 50.3882 359.241 52.8716 cv
359.241 55.7866 356.811 58.3237 352.628 58.3237 cv
350.333 58.3237 347.904 57.46 346.096 55.7866 cv
348.39 53.0605 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: ( ) ()
%%Title: (1501.m00.i123.n016.P.c20.204490867 Fruits and vegetables flat icons.eps)
%%CreationDate: 1/23/2015 2:33 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3Q<HehI#NhWpX1+9u_!KBT><mcl.O-m/p&K)t.c)lWiU8M)IFj8JKFp@k(U*>P'Wm84_Fm!.ViV3=9;.P376]l'TCD-Z29
%^Xk88)OXTh)]AQl(&mpYJ!QCl=&7WFphiO(go\2Jc>h#X]BsdXX*Li@HD^2TBk.^E/,7-+]Q\-Kmq3tSF36Eq-F[WXQ`;pPjL+8J
%-Y$aGC=LRDnEVukJdLp&[EJ0T3]*D=SIXuhk/Qg^-bK3LP0fX4]$6WL+/E:<iWma;dkW`&-X2Q"bjH7QlqDlO0HT0]:D-#G%6e6Z
%ae^\#6YmaZQkbUc@<r;FR)*0BS!p]t$o`0bWT,a;35f49jOhquN>X^/_^q=4kR<2b9u7HIO+uTLD;6#S/`;76%*_hRkW8*)^^r$M
%Qk@-,=^3oXN(/5LL!qjA)XYQR[NU9'F:6.9!/!P@E,s_$+/0!-3"4_g1rSAZ[#@H[*Pb.;V.NgF6""I8AlIWb30(4PCFIuU#9,tF
%&^hAVW?F0;$d]=:11N]0+%ZS\!.[2Z[\QB[7G+"Di@1:&o092!KI8!q-S<t2%mF[Sm+C2`k(n1*\KMYFI7eId4mHoMIiGA'7U)".
%&RYiS&0q%%")Qs)>_#<mZB3\>Lg[__@1\1'L)<hT)B6KVHS'"<HSQ075pI3u@;%X=jO"eP#_@&$!NSkX,FugcLN@@\1(h9)[K]r'
%r!.iX%sQ#>dZ+\ZK\\kIYY03`"@ba0gmZOc7p#i4fYmC_j/O7NOg%GOpoK#$!YN3_\N)$\de"fu6QgskaRt,ja@YNM61eiDNBAJ"
%+2I=>6%i)#Ud"toKX5>_.+uF=Y2kkf(^)b&XQ9=II'jR<+)6V7-e3tmF;09?C5OW#JoJnP#`gQH@Llu\dPJ+^!XV@&)IXh)73pj#
%dX-LR<)Is.-NG;]proO3#`%'HW5o7\C4o@SZh+8cKYK5TM(W7I"Gq@O="LL=6!;&hW\Yf"Th<9##.3tZB[g)q:W+WH_(H.mR%qqb
%acXq[SO;WTL`dIU7aXT3LsXHL))),G:T?ZWN6j4kj,rlkJP,A/!$_b&"q$kDU&g-41%l)Ge;thtbD<d@g3$Zt/(4hM,jGlhr1LnO
%qW^$pNmJMH!=B^c[)=hX[7.GM4YVjb0G9=se7].]UJ7G^&J:c0J@2dMdqD>ki!<mq#dr%[AOKu3P2iR\'/g^iJP-iB@LDdPU^$tM
%AOhR)6Tn3E/q6!'YH$tbbNW!>`b5-#[q@1ok1"6/l3m)k^m0M$Qf6+]dCjY5[>o9O1/T_"fQi]YdiUHPV+m^m0/T'lM["Yu/`$$e
%.`;9Th>0@pB:dL,6EP<V>f8M0l<n?EYf.U]AUVIjM3_k>ke*Isok)J5\E#+H%BuC+<W<m89@+R35NPg!!BcWM[58O65@[k$R.Lf9
%p3T:.V>I%Qr`mc3GFaWGo%hAlX)hJC0=Zo_Pk^m.I+#.-Xk/PI#EYf0Z5"5e]o$$H<MSNLRR98M$qC*Bmr@KsY1sM3_Hs@&<*7IK
%>4C@kDZ.BHjeBB1r'cX7DWArf6Q9=mJ3o>J+HA'B`b'`qP9r6(-"'-`OI6$33$(Qpo1Gh&0mLH'Xm/ooYms`urqc25[oKOu?88rh
%9_890#dRLt5<JYdh^F$2l*u^\kDZ#L%V$QgQ9@@LV0<iCJlbJ?\+-YI@.4B1h)4ZDs#0]]I0W\mRm&CQE;n:<!S%BLr7?F)Wpd%\
%j'!85ghh>mk$I)rqs-Ji\VbUiB&:&ZNn4>i<\d/]hr$/K1<\bWB?j[U)<QIaLOHI'[J=L[KE,Z.c)>Ph/H%I$s"rb%4s<OT-;^g+
%N?<&_CW7]%rR/o7>]UfY.mmZs'-:,&^c)b].@Ll2\t+&Ejof:1!a97QlI.QhL^p\ndO]N;D=gOgD,./'dqdb^_()T$`HQ#C4hYhs
%jm1c;rRV"l`5bX9)WFN$;/(fq:k+JoN4;r+BkAnU[9E7'jYX0Aj\3D=D-pr$4KfOG52c<WV>,9,'okro7`T@'NZ&7rr`/n,]aKF@
%;e)\L[;aWgQ/Khg=sZGX:8J:IC5=9uluW$P!M2NS?DM&MdpMbUY?#Ml_qF'%`umCmEm6cGeaBrHFOOrl2E(n3afe#nq9?Ccd[shL
%a`^g(J<u?Xm8c;d,b&,RM$^<.l*\u^#t%#)dqDA6*:-kaDQU(%[:i64?_5!b"U3FBs(!_ZS6:W^]fS?$$-id(/lp0Z9/s%\A%p[<
%/H9"Z2;lYX5X;ArdI"H:aB"sDY17Q=qin:b[7\VZ:_0.#gB2L0IYiPrINdA5jg)>e.'n((;`:eA?%+c@Y2AEoO=h!?Y'Rn3^XR.u
%'nj>#JFN<o5[[b6+F[?ASa-u?q#.'/Qts0WFkoUi:!dlXi8jUWF1(/<F3_c-<NW%s#Wk`f(lt3O=>kXk9UDQe.#:Ir>b^sb3`)\J
%-[*)'$O@^kATp7[e>TWc#q)>N5Rm1h;[%AS4?.3CLJ`=8@OHIt9`8T]@m"-8:>7A.h!\MkCDqQNdsk92naV\u](Mh=a8(jT@e%a-
%JdKD34BO2Eh6!NY%me7#b%B:tfr.&p=-E")32I5Ao4Z?DKIEa)[oITq<D8juco'5g]#NfuD!2(55^6#4jZr0t!gKYLFA#?90hc(&
%$,\,C0,0&H.4Rt6/q7ONjK+<t^fo.!b\Sgs\Z#R;&^!fe0XDS<M+&iemg/#->7S0T[?k4-]a3b4,+)#cAXUqJ/qq_V`,^c<D@t&D
%@_"oYpFhTh<r!_'F6S4Bp39?V;`pBRQs#=0o'R$tG'`OT]Uut9J8Q._*G,'raINFNT>G)UG:H&U8!Rh#;[#2OmZW7gU=L>sWFjdu
%hK?EsG1C<fLI4#VIWIQUb_+DEdMUf_"KcP[(t*XnPmP#dhW8>'m>R-])4'q?Jo)j2]S8TX<qDU@^?Eo/iGhN-cMX]=aUS+F-Ka6#
%.6qUYj_i=WmJPf4)K$c/fC]ZB(kCl0.sR%sa12q4d?*U9%AqtdV5VILG?^D/ff^oKkl`NaI8Y#-UE"E3Z.)"2d&0U-XtgIcRJg*=
%OU?spcW.(;FN!rm$8DH@E?F5nX#<!Dku&*DIr64'^25k!rJ$_^H;a(2WOFF"G8P;BPg+'j"K%[=AhE/Uh'pCOBn1Ij'MK)Egn^'t
%RgFt0e#ISolY\'Z6"W`eh87r@]fo*,BR1RddjGAf$D6g"(n:mLfQ>"b/8^c)5thcC>.$_aq\R9Bs+L;aZ`U^Yo\RTl:6M9*DX5G6
%9[9HCP?uVuP9,3q(Q0c8hj(B:<K8g,WO!9m9R5WVYsjf$0PI>VaJ[sA[=$/?s-r#@DK0T)*q!m@8VKl#U$&HlX&?o,rT5Y,_6PLB
%fXIAC[@9YTJrZ%H-3]m`>$-(6[@5_BZ=""eBF;Y=1faP(Y/V7"CSAD<6W=iDl^t#p4?RkRlCQOjCTl96W.n$a9sZ2)1L()FLDSu(
%;OGA$f2m$A]0DQLR<EGKV/a+ZoSJ/6A\0bm6pVa!0PcDU`ZHTg8TA-7\98c"[s%&fkaDH-k6HE&-H1#9'Se`YLTc3K`'e?B]uqs0
%g:8n,.1"<rHbj0s2_.dODpr&FQ:<]Cc.Wl4m:OTl]D1tNLJDn;9hsMqku&M/bsnKb&+A+=^E8a*qoBBl`resVdl=-ha(\Qb;f?d+
%YhuPH3;'=[UQi]=laMcdU"e(tKN*87g8-%=%HX"*Zm5g1rEF0Q?D]8C\uaItkpgjkP9[/-qs""sAiu9qm5V54e5\XZ"d4uLS4]5O
%C/hB.JPiI+>UMs73CIarr'edCn3gQ[=?g-#]QtL$Tl(P(YnY$-QR7sd-3loUCS]<d::]/^G=PV/`5.:SSlfZg6MrLlX&Q6TheuDc
%Ui7(.PR81U8J$h.<jMb$J8Dc\?Ut3)V,G8S-qseIfQEpNL"!!O;[LalTA%+$4Npi4<2*&VCpRm$5p],ADOS!*`M*uVRe!fH74$*T
%CrR/gU85(Ce#n\nqNh`A]OX!C[4#`'_lT8t74lX^g+6u9r\9P(LK]qQ0LmR$K,LXW8`d]]Ik=82d?le,Z`$<\[TI/pCJia!TGAi=
%jd^LhPD9$J9ukM)/P::0C/Imn[:ttfH*'M,_dTkuotU*_Aeo/s;JD+p#i$\>3STVXV5bhH:h'.ThO#<Mr6\eDEX-[YIUR-_]LX]V
%SH%^sgaq0_H$`qI0&OlEP7d[6?Heh9@_LSJ1CLm>)nfi9o\)X8c%'+n_5@[S[a8f:k;t8/=h&8=Vq,)um$qdtKt"M;C:DQ)$YO=M
%eRh(I/UXs[<_K:>i[7(U^U_Qt(6r)2'`;<61M>tQE$7][(F-I%UD,+YLs\PJHH#*XqR9ZjXuX8BkM\=rTk0/s`I*Q#-`QD,@XTU-
%e`+&l;BVt#f"IbYaCjo1(7&AJ>g"f'rmW^mhZeI_s5/>[136Er3erdGYVa[*beP_dm3]PG1EMdKHDRLmW482E`pb(W:%2E:FZRK@
%P`#.)'PNCp?cKr=iC@7pGo_eZ?Nu*?HS<*,Rqm,.mO,*6h79/]?XEX8iq4a4[XW?9rtLZ.lD8+V#&!V]kgi7NdsjU8X#I^M\Ca=-
%@0/X1MP(MG2j7G'G-mZ`D3,rQH':^(DC-ba:93*ZY.L5]dQ`AQ/[`2Kom/2!ZOJF%8hc_u_.Yk5%)_!s^qcfdL1+`;#oLU&fZ6(#
%\+$jEa]U`^\0Yu.2uOLNrMJTPG91)">b(g@+C(H:%`HT`TDoNGis@Ek2H',<illUuTu!7hq9J(TP:Y",(MCGq"(cK7]/]DQk4>0Y
%GN]iU^5Ff)8S("rrlhiL]tE^/q>$#L<s*MaHCa%![W]-&$0Lk:m??7\mZW7gQWpM95K<k-X'T(UTYkL^ha1$<?LNE$"aFah>?\Ta
%H;?7p^'Z<6%1'3XBp<i!Le0n!>5S8&Ibo7N11X#=Cg=AQ\$5tr_;0W$^O#!Yr2=p!\$OJ&.iVg<Bad-V=JX6>,B^Hi;;Xh-Clpb_
%Us908<!m8XOZscjg*2%?IjL#@ilKBH_;A-;C1;T=AnnF^0KK08f"7J]57a/iZCpB6dko#n"W@WE/gabk;H*\;JZlOpP3lD@'LgJ&
%K:-NBr7qK#ROT`P+#5Po80J)ODJp-[p(*Q*J9-l'9>u^nQn*g)FH.#GJK.AUm`2[`e[\;bph:M/Gk&*oP^cg]?5ABa7H.m@GZc:u
%(5\AHian6sq7gn+*0`!*&kIo`dOdCul3C*@SO'he"??'gLcKm%@X`3+:IW.Z:FUtMIV`KMI^L<C`Uh&a',(EuIBDi-la/L-2XN.l
%Uj4P%n^>??&PdJ/Sa+QXXG(YaHFce`?!P%Z1rXY.QJpKGgW%2_9FKVM]63W&"fD*AJa!ql?+dnYG^X:(Cms*?5J;4ihTrb-l(,d<
%74F<T?e<t0]GS)ec9=*<_9?8!T9IFK'Yeip)5]M0<EFZG2[h-a1mU0sb[=^_[bVEc6d)U-<6;Hno1&rD^G,rf?`6&Y_8*ETjprL@
%c43\e&_\d(BWK?Z)UG*k%,D'R>WO"UGT7B=31/&j!:dC!8QC&upR<!RH5^1oh/ig7@E1rj'BLt2i<ea;*ogUoa"S<TN#@Le(3tl'
%O;_mEnec(K=QD1`0Ct)a`ZgHuD3S2a0c#%n)9HArK[t-@'t5dSZ[%AQ/mD)]j4%C]eMJTBC>;q0K[W^"V"-Vn(E2.EVqNR1b>BPe
%:@*1*Xeg=c,LLjI'`-)I<g0LubbfW0ke_&GV3_"llScn"_LnHZPCbC2gK0APr<QBCO&Tp3ml\j@@I_]@T0]"HLPFs\c(2h;42]uZ
%4Lm7^Rs*KUl=k>AFdj?r.=OU]j/$a-]h*O$F85r:)R!iECsYGoB(+EG5F)"(laAFW2;k.\9F@YS;PuY^>!.+oL-C"%dX'Y@?Ah3c
%$NFRLk0(HdJ2$B0?J7LVH_gdUQAW@"'7E(2VY)M%A/>IX.?N$skEaBHEPbsnijGjG^KKn;2*3U\`('9c^T*hBO6+e%AJ*2cdf:to
%\OA?aLuoK#h"1Y(UX<<RT5bIfbsO<HLZMrc*m^[-E+)5R\J1,W_RW)p[g;.4iS5WIqcAPoX)&7I\o^22HUqen;b35^Qrsd\hKiMi
%Wo^%]'T73R*oa_p2p/%hf(8Tf0e#GY`Oca]'Agt2]+Wu!9CfEb#Nk)uN5\/VM[)"Ll[b#:,bo/5Y,^@t?GEF!jdV6gC@[fg\_?ke
%SgsWjmej)]a\r$7-H1llIo:RW<HLhmAke4VaETKi7;[@%YOM!iYGl^Hjt9g6^HG(DotN!LDf?;#qtK[0s1[['laAg1DGh1,[(EG5
%VsL"@STM#;UALbEqK\Xs$@'hqNV:n"VCE']msn!GQhnbJdZQ30H]"Nf2+YQ!ZocR[+5TZoXh>r+"^Pm)pMY?@KS4%\*eZ:I4NZX7
%i,:%X`3I#i'1G'<BlO&UX`m^7%Yd+olol/bU]_1U*<WJBac2B;3:Q=W9R:bo?D7dU\T[0)VUocc.I@$W;f%MHc/-;[oab1bYmVrQ
%?g,Gbl;t+f<DLrY-X-:5s$!(=eCOp]m1eAKWD1'?S\*DG+08D4IWep@]Dm.WS"E$W'F+L_NP+%?:gBMk[<#Vt;a$j>;gL%oaia8A
%Zo!_"m*27-UZk^J3k-'Y-NO==DE81Vl:Jc6-3lo?g,X>V6h<&@j#H^RR<lK47ar5tE>JK4)6f*7Qu1Po@iDtbY`7,-KE&?fE>C@O
%M]Wo9G<%gm6]XICMj`X^`>_"IonLe?rFGae5;50c5Ee#!nX^Wlfk1.jU:LHUV0LU"-?M5jB`>c!5(tTKTr!faUatXg$^*C?H@6T!
%[muZDc*3M,]5`V$A8Sp.`-aQVoD1AbI,?*:q):).>]+%,YDLNA)\]8$6A_[kAE)f[E.`7e+.9Wm?Sh@A5BiB8s,66f^k!FG,p6#s
%F86aDC_m]=N]'h>&m1T0Gb.KV3_lUf(HuJ+MIt_=SgVF5]_:dAD3_-'$0FILNPZ_!+q8[-,!3n&.<>:gn=-fLa$fA&CQhZ*;*LC>
%2)7s$QB`=>1[f.g]3qs:ZPf6^AX8s%E<q7Xpl<-mbA"=:e,5BG'_;1h]UGgDdcN1ZEU1eS1QhH/:efN)?DKah;27d#EjaUF_YIR7
%F\uWDB1a`Tcjjsh,=kJ<4f4e=1b.IF+]4_[:$41C`\G\(DkO3.m<SH+g5(7Mf7.*bkrVOdG?jINT1ANH-Es1K`Og(Fq,XtQSN1d1
%cB[/,*479#a)PHue@,UZ<i]OUKAh#;o=Wcqr7NZ/&,:J<;'tUI#_5H`k7<)$A:Fm$YT5pu98C$u0MS>Bn6`?`Kms'qD=q2;eN(SR
%_:p)m0,i]n#5o!BEqpraK*,<E1N:W4i"?[UdqZR!F2LaVjp:tmWgrS9G7M'O^`Q^KE?Rb?b=YErgjfn^ZRm2l_lPGD.K+8TE]>8A
%Oa?a0s0`H1^-ULL^dR<=oC9/QWVcp,StIdQ+r/`<eUo*a`];X?>f<9RO.KjZk&regK&cXc()pW[GQJPc4"X&:".g']GQ1+e-,96@
%5KDkOGZoPhcP61^VoG&jkP.gJ-CQo0lSd?Gpg?Z:\XoKQc4&0V%uf7pn`[m]aVNKfbjLe"BCbPI^[iD3\+cA"DbMnqVp3)5/D?S1
%E'rQ$25tYJ?V+[AZjP8.Fn%]3Us*F).CW_`DC:`CIM48F=us!00#Nk#`lS\b7jjhj2Dah)B2"bH5/=7SJ4\^\4T(=D0(DB?R^@ai
%B`_Ql@LGO9l81jAb_-M<1kfJI,>G)<E?2jDEAcL(8XZf%eg,@ZDh@WjTj*,iR?][?R\5^25V?bcYT[7M(n,:RrdZ%DOc:<hX<[k2
%?\JVm;J3LHD@,,E*o_b`.Q(h+&mHnk@l=B928c^6K,DHPrnnE%[5;CrSn*rD=2BKW7d,@_C]FfTk<Le,EMAF8@2hOfSN*hk="=kS
%\7QqFA9+O-=2@Ki/7@GFRC"g1CWT9N&jbR++rF%<90qoR,J>9&,/sW+!.[J;fObbaafe$A)I1pP*DB``G0iq#;KT5r=N_h/$H<WL
%Bpb3c.l8FPE/sMjnpBknr%;*q1,W6.(cJU0L3Sa5SC@=&.E#T_5mn829CHbd-qHKT`S,r%5XcNc=Lb10kMR6e5S?%$Z8G,h%HJ#q
%$8;]]_d#HK5S%^7,e5,p9dj/5/Q&036WjC#I2!eh,ZI[7`00%%ap8=s-up-lf.`A<,ej]<n3IY`c"Sq+(rB0&TUKtsQ4JhtO:-ke
%!`#*'bne3F-WNUpMic+J7iOFOB#8T,$&3.JSn)o3-3s=qEY0hfaND`T#I/RL?)6#)B'Z6*/5lOfC(V-T%69oB"+UFc`<7b:82<o0
%8G%^9nuGS#=cup&o;:#Z+aW>ckW5EU.3aA'6i_*H7%j%]OJ<7;8Ri)0.&4;3JRU!`%<R[;5-P<,UtNP8J>1G;N)]_EE#i&8=Fh>J
%(^XA:dnNJ0)sB7+:p4E##UlOs"PLF5cR$=4d0<cD),q962&QhOegs21UIiXb5T?'k2OS"b6kkJA1N?SC$!GSU&MF-J$WG.pcpt+A
%EZcJ:5;Z$O:'U*RW$&/_<_IlX9s91b+DBX:\e+l5;YWrJ,;#A$enBqI:/66Sl;-6!6j+0#+ah.Wb!t?s&2+/'d"e^+-;hd%4q6&I
%ihrS\9n!c/+Ae/iA4(#UkMW202HT=.mfa#K.Lt'-R[a)/kfaV(]Z8eR^C%B/U"]dn5<)Y(=%k36Ed[LUDF13IhZu@H)0'PW2T]k]
%atVS3A2=\e]l]l%(7.W*$+-W^U's"ILm23oHG0bAAhh+^WCRuT6QQP8D@#1K-FYJs,:2g\3\+Sqd!eB3,U5/qHP)V>.`TRQhZSP<
%F@;I6iW<ama+%QgVHctQLs^gX6>-L`J7O]4-F&uY/Ma5)i!9Ua%I-']_.<!lS>Slp,eaR$0OaRq2OXi<(=<$Pru0*RSq.n).25Jg
%ZEqh$l/SiM>KQ>c'tFMI+X<'W^_(i.?uj>3$\8chL'bQrX9V:Tgad&'1WK=*X5l4uHJjZoj?Z@iOYfZN?mDer^_J3r`]%fZRr]8B
%Oidtr_>l*=\'\\*'&S?JjUbLT/99*!6ls\iL=Kd0"#XV`%MpjP.YseC?7hNA/lY2'#Gs"U+;JU,;eLho';:dKOBD#!20<33L/L[<
%kDRJ&ju%J\-2CiNVLSi'MMdcX,iKF+W*%Nq'kmdHaaehd\>Gu5fQd$Zm/[=u^C"%15Fbi=gPd+N$!rOd4E4:s$;J.9Cdl8l;BpCT
%d&-J4YNNOEOT_p5rP:d<+@[qMf9C=d;J_8I(LtUL#6J=%.ShD=RJ\C:%1Jl7]3m]kcp9]L;Ru"YOa(iA&*$Q]]M*G30\/Y!6)^"^
%L?(9:G=o(f`-7kU%&KgdR^jU`\)R<0JhTHCi;&KJ(PFVl:_XXn(Wr@Y@i30?.X'iE!5bC-;js&;(WM`]EdbMLnO5Dlk]93?dBZ"@
%qE@-ZV<kLk*&[bKiWkplkat*=76!MV&5p(8i-f\(Wsm7;*C+!V2^f8M'`&d0/XS]@UZ]6;F9_3j%k&]J>jA'rKIg.ho-i&g0G<Qk
%r_uD6=.oWY\hm@n77rP;1:ZegCTrE;9+Pi"\hk8GTdmHrA2O*^'Z(3@P`)X_MN<>+$sbG0aXtpCG=;lV92c`8K.Sr0R>PMh(B<BD
%aX`ouTq#mQar]`@/6\Dk]3TUMT\AfZ15c%03n<>A9P-%SI<k[iIc8grWrF`D`pRO][Xu9YU0$d6h+"=+F9!IWkA*?c-9Uh%M*i.o
%Ln30,pj2`2#BUGO5lR`sIa]da%P!di7ijK=SM*3@[*O4]XnKce;^U^e?];,@#^=`mrcR@#eaOL;cf1U)bq%\]A)B,@SHN5"V?4Pk
%C'/t7If*JbkR0Lol?6JH1arEaGQ44-nUF'OaKrOUo5pq0@[U+Da[ee`M)3$9Q,<BYoP+F(:'\Z]SE4Y#j41%mrV]S/?#MfL:l%"D
%j=i`prY'<n3rTKD5J<]b''8iKcRIf@):7I3>.$IWC4$b+MmX5MWJpn'lnrD/^oo37fU+i?#LV2Yj_F`CJOi$o4V"3Ye]RYo@A,jZ
%4_Fu)CH'Kk[Ep7PY#>??W1(B^NIpN6l[W2Zi*LSe>1K\D"a[PDr]sKC6',h\22QU^gSk$./NGK3iVrAmDTQ\ESafKb6LW*4boPJ!
%aVaR9;]u.pJ?KUdG+@-KgAt@_'0>No@Oa)/#L-0K5oZj])VuVgXWE3hKs9WgWSe2dPT7R[hn)Xcg.CIQKRKa"\FCh\[_/Z,gMU)B
%Ue?XlqG.9RbP+X$:Du)k^E'r;ViFp#daMuTWqGY,;s*[\]r(qGnK&PHDJH<a(-S33MKb[.#ffcgX^AT']gC\fje3Pd"_QYZWU[mG
%\f(Nac6R,/Vd`<5$rX)!<,J^bq/\%Z;0P)s`T[eXe*&]ZZ2`.>\QA;so2<\AXERRWj_M#'_8,;0D">@RamCgK#u;"]-b@RHJ^_-o
%3`g4]fP>Z"rW%QYDM<`0N77&sGYY<&TjJV]nB=<X3KNk!i-!hPe&#al1KU\n-.<&CcpP&:$%#Yhp1QK][fs\8h-0Htc-j-o`V)ZC
%`aDfu:#3>p)Q9nP7pX0\)FMg&C#drZ-<ALtSHCnfSAl);I@@r]J0lE%0fVmFl\CriF8tZ=Ft2%&F&@pDMS5<H"pCt`X4\UaiA\TU
%!b1A*^f!n);X(#Sh.bd=[Xiq^mbM?al#e2Qc0](_h2[g^ES;GB'g\WA+:;44;f-kHHPc29dWsX3hDYnII,f?2J5S%2jSmf0[p^-^
%,qU-q>7=5ahqO3SELFu*3-NZ3S`9::?FFJBrF3GajoI$s042H;8bqf8<T2KMbI8iPjb[uIMd`U4n2eMZmCejalunI]h=>bN'G=^'
%2,3del@Hkb_WK)-7EV_T3<2)V>$b,j,M0XE,b0Ru*)7.j26#hM+L)?P8YKPf%5`?OaogT4,\4CH>r]5*\(Rmk,?:#Ya_+qd7jZ3i
%4Md7gr9LkObKO\0fu2Mk6eAV!7mGd0ZW.I"J#r6Ul#!:oX#;bH?7+k$Rac$>CZq>AC];K;Sam4^=JJY>W(q]!Eif^en@QTuJ-=C`
%fU',6iV19&JF2@EX&VF:`t$)cG1*]&?2MO__+lA!k`c>4+l;I+U\a`[?>lm(MYFFt='.UkWX7M81Y(g"gC$uQl,.thDR3@qULl$-
%:T^M?]@Y>hC(q3P,(PTi'W7=PN"$:>`5nI"f9,m)BmR"jIER0mU20UFJS@e:VO`R3ZWfdDrmu]j0[RDm5i0Zr_]]sg^Ea&S!j+a"
%L9@KZ44S4+N"*VIQsm;@M&eNi,l,H]AIR^c0r%'uheEiI+p)8/l2M]5Ah`RpS$`$:CH10t]2B`cIh^iNd`Tn^%M-E/W2L'$VeLJF
%H3_tBDP6lA"3a^D(uGD1TR(G'8PW$@:j8WIH$qTFqcWG@*q)7Q+,#WBSojOsdl`Ni17k6;JQIk%*b#f`9rI?dg<Vp$C;!*WWML^.
%`bfk6(t@!,8WDB%2`nb]DQVL1%uK^A23B=6QLji('UeYg@;o<aG)]1$Y2/OZ$m8mFgd#qYdiTVA*hcUqG/>K[NF=tsJ.MOrKAI2L
%ZL`:hCN\!LMWCPi9hK$-:>OWFVZR;,aDPdsfVYhWB>_U#aBLNdmR6MgO#*lQ_5.AtN-RH,NI-W-bf[5-]O^OZ[o_kGC'!P6B]tu'
%[t4EkKl\<QG>/mhr8I'1e:*DaKUok>;1;qA?h.J9SR^mgIXVV9T_a3MY;.N_dk[7Ib_A'l",,m?<c,@7%YV,:]='dQn&?A5:1hLl
%4,lum"7`A>mLr8U;c;E_B<Tf.9BO%giRS2eB7KcR'Ws`QGUMpuL+'r>%c-i$)#08#adfjPi-%0a+pK$+eEo(9RN4U<^i^V[/K2%n
%"6]ln#/Q-`^Oe6SV.GT)arZkhrLIZ5<uC94#Y3lARR-M\$UU"Inc4o[f;c?G!Fh9rHg,[9hZk&;A&]X3#nK4<S\Q/Q>"$lJ."f5,
%c+D%$)4D=7gTR5qHT1I4Qrq[BUV6V0^eh/Ala?S!K"`ZGND?T6VH`qpg:REkhMbUJm+#j5VB*-Z!.@1b;O.W]1thUUp)99(-Dm*K
%+Zf-sb9/@qr`km9-96^eg$[@q'f?fp2FQWaH*P!=0:"X>dC38XK8-B`ddNo5)*=lKWf;<7U(YE<I_QK\@OHZ]5UG/S<p,%Rkj9<B
%J?f=$g-^36lA=0?DA:$%CLA!2Xs,AcGOB]a52"@SlrE^r`O92pR5N"V=#E<qo`HfKF&9t`r5o^X@%(7dfF>k[#,p_g9D0QKGd$ES
%+*?.GT)Sm5j/2/0f>e-GNRI0'jIUT\IV?blFhI3:RDr%eZnJGM]$hY")TQ<t<QTQhX6fL-BPX_d4lJ=.lr*Nq5k,=2Rn(;F>sgu%
%615MIkY0a3Jt6lc=m//5"QfP\q(]Au4ie[r4@mj!DMI)2CGTFX;:h2Q`/GjFZ+;.D46YC[Y-#F@dMUaqkuk6A'&1^+_pEAWUM'bC
%JFRtIl@T\*IBOZqV!aTfCTL3llf_Z*_[bL9)VqAf.G0*qX/BIF]lH/2&^*FFhTfG,d:*;f%bZ9S#p$D*AYYH+G;%[F^r&@$>-iA9
%7BY=:/ZF1R;)8G$ri1F2XZNYS2X%,n_G8KAZ3Da=a6_#X(;ScC(^]m',XqH@-Rh)(GLB87lqE1[(J\`k4(?62m.Ic+IF5I(K"!U\
%nQ$X"_0lTXTMmbKL@=F6/d@&1ET9!rNacp'o:9Wo2VP]>RjA"\ArVO_[>h_iELkkh7`Uck<$\:K]!:BS6cD0rj%*AWrArJ4F:L<%
%Ng,PW2b".NlI;o#_fLKN#33a[-.*&bj>N/*&C.Yh%\@*gg/^?U`,f8J3cqP1q$jQ?gHUnuM+:Ge#7e*@[!E9?[R[<jfG;X&?_bh$
%m(dC;\g)O"<P+7]#WQ3TN"E";WJeKeg7rnUQ:g`/Er0B+T@qsJR*7J5<M%:UoRZ@gOUTr1fc*`I6l`K0n^+C;]Cf:W?s"*I$]GC>
%@%Upk0pi(7/<ja<SCS3m-7`uGHIWk1#uLgj,;l[<epi<S@RrG(pj%grQ;m7.#\)FMQ+,N2&.Q#4M:oLX\*0)+>8OMk$H&4_;_n3p
%"_0=0Zs]8h0r!1=EV47ZG3lXih17`6bg,`m-APa/>`r@^9FoJ1p+QqEM71l$U.n,AA(VkuVXd]%DcF_*TC<6/0Od#^Qt0C%l2uA<
%4$/?\^V.7WZg`R=dlL(][,N3)hbarhG\L'nMt1/AC4gP=ri>(-]1?i4F@<PMMdlr&6lSUW(tdm=9-Zs#Qh;K]W&LF%&(Cm?Z<lt_
%RkC:WGCI&Wh--]`'BOQ2:Z8=e=m+7'(kVU&)]okh5$[<<@.C"Y\AUt#m<]Y;,P>'2hB6/710D*9_VUkq'\tM[oA[7=g!PG5:H%*J
%4kt#5XmG?aN`Pc+XkijHqGlS$Id,/#o#!fEagUZ-YFk9NpXZf\mlilKcdiUj4ZqM;Fj%(t_[ijq-H&&ACDX`#Y?&%-gDaM*O1.&L
%RdKM9$bchgCi:<KBa)3D48Gr?Y7A!"KmR"%DETQfZe:+8I;9j&hSXrN=B\mp+*K`bDkHX\_s0jsmN&Y8Z(:2.:X+7B;Gl5!S,ZN9
%p_K/E?>B?R")#5!m7[9;e]1IrZU4B1n5\NIej"(khNU3BYICk2-cM@IDJ=C*EXBo#^.MbYO1N<RcYmC/[U"6hI[Rt='X$O&QGCSn
%#K8G[pqFH;m,;/+&T#$api?&HK23#l(\]D+GOhfc\,3_beU%b5M0D^k$d72[QCjCcb/ULD_R2A\fZYr3&"_ihY'bZ'?$Q.U<,fI1
%T>'!nGJ-j+4#cr6qIJd[i*%_WZo(@^WqX92=24*'o!P<,%p)t25':oOV[pKd!0=QIp9/U@`nYh1GrsV+5HI*&3o!i$ohSdl.G*:?
%HEL9)@o%!n=ZC!'\DM`;R$/%dq,Z)sld`k@"%6aV>Ka&tDS@HYlO&C@#><g*^!1nBG?/M^T7eibI5LCUPm-X"PKc%OO6c`'hIi;O
%Bk%H7H>5XXLLg3o^,97T&62Nt2il0_T0_@6%Q*nThI1EKfmHW-oAi7HQSJ#g0/O&ZJRu3H]6f//o&OM!e,QfNG3=SE?Wc"WWb1;[
%q&XME471/=V`QEAq!;b=TBP[nk!nIeb:c9.E5sZi;;MSEJR80NE!r;5/[4?='C=ffC,>;=Ms#c]U>(,DbR`jFEpg%(m7HhgmD\f?
%a*DnoDdL)*[J@I[r\ShB?1-d6n!=Q+B3[qBaN;csn%k[>LRiWrT63LP.HX?Dl^+)S2QN-\4V*ABhCDp(mSjIg0X(*3ajYSUD\\OV
%Alr[.S3;.]([q&jgTB'"CU&?`p)-`L19)o>./8&K8`$egoO9T_H5uSYWYBGm.Tg<Ca]<Vr<33@;[Vr7b+1k]V:%ZrJn?t:$3d5XX
%qjhUh2LDA?6[_5uGHEsZG(r'FHa]C/790*#G"^!hRZ@g-k/iCL$Z5KTd;?9l2"u61,M\-m8;N:Yh;%fi,G*XprE;OMI??,LI?T\p
%"Vat=e*lrG\YChR_c#H6hpU/8Mb9sFWP9fT3e.^Pq3nke2O`Ff*,L&E5<lche[#Qa#57!s'mFS^>Zg=B-7Ts?]3KjOp$]B!?Pu&0
%FEX-t05UO-L3VC(PDq`papQ[BeKi\UqXKq;]!qDrJnr80Io$B<5'_fTG5,T`s20;ilI@9/Bf^XRFRXOaF'bj/:;?35f;`&u,rNO#
%_rkY"m*NAuIWMs\P]j-0mpMR.-eckD&0oGj(%3G%4YYLF!TCZa:AO&LK4"iqPa\AsoRi28%mX364j9JHRZHM-?9-=t'g<?&jSEjS
%pYu-c"."dXoUs+tp6g;I<&jZ%`Y'WZnUoh4mbsLc8N8/ac6(lQ-9sfs2d?nGj.b_kJ-E0p9u?J>L-GmK]'JabS<^P`Og!VnLqgS%
%jQVu0e$lm:Q0h&7>('C:i9k!>Zf6lZcW<c/42rNAQCtd7gedsq%_%eq[='Wbo_KC2WjJ?t+,fMF(MiU:q;DXlq!pJD5IbcaLHiBM
%V8.6^#M]%<.<%?&dbKcRB5D.in18C&$Hj\"WNOa*J'FaC/C6raX*K$,?fAIu1d#$:J8KQh<Gllc,`U@6#s\I:gqbV4W1gI\[M6We
%o%<8>1m(rG(JN,Z*H(mk3+@NOi-(,p:UCF]"t%KlboiehB&".GkR?3(BXVRlR\LZl\EQ;[dU**PiKU63K[QM&r0@>.(1C-a`n`(3
%2QerEKh+0LP_R@t`hA5;piId0;\Pp]'!P%?1"7>a=#;o<6E!LcA;fB'r^p+C9CG?>J7XlHI6*2S7Zp2WRQcFEWE#_.qOBI*4]:bR
%G!62jMYO$7F+%_VibM3'8eMhGA1N6M4!+pKCQHQR1*IRFH6<[EZC[TH=`QTXBInSdZYDap8-!.IP9B8ALj>sU+sT$3A2_:V*f"Ju
%Z)S=/M/Z&XVF>]F'-ip"Y`:8b\-sa73_12&E1r6INZ![#512@,'kip]VSsSsd3hA7&6<MZa^0Q[s/,[Jd*=Lh-^Rmf^u9[gm'.YC
%ZSsNUV/=4i@%#iIh/bi>Z#%EBQL:fMc-gn#m.'e(G'rJpcC9%("5C815NZIo4GDWG.c([R)WM%`e::PJ&e!Q`%0=_3]_N+d_FG]'
%L0J]Y_a,`Lhq[+e-m8oF'+,gh)9^ddjNd&5V's'&p0GV'ae-2UPK)kQghCE)^@UDnD)qE/XgDpu21q:VjA?V_W>5+jSpep*(%TE+
%g%\lT4b4OX;pd["_A`#2j@8t<8PX`g5:Q$0*e,1e6-a`SGq\pOm47h&rOomN]%LpB\Ll\d4>?A7b!0ITcltP4ZksfbONS5h(-%eJ
%Y<TWPMO1O#VeaiCO5Nq)HnQm\>j$;qNfKE[L.\[D4BdUZ'nK;7pq,<YWVGlJH(k)Z>hcci03s.pqj7CfSplsqUuLA$<[5)qpM`oD
%T;/BIU&E[,/+>57LP^Y]`N.NZcdW<*oVZ'4JNJ0[\:4"_YZ?1`[I2KoM5itBEWb*h/Oe&BlEiMkNh6sk?rd.HAf2'mn,#3cgW?[e
%j2"[5mZAJ/5HeMR&VUJ3fH@V&qo4%]!0A[+8mfo:g;VnBne.\j*Nnp<ES*AAX#lA+ou&OJVsOTpIsk>0I/RRl[!&Fi+'!KK-rN$_
%-G`_Tm*"ODRpkk694'kI^/s$&FMIAm]5@d'Ydne(m@tuN#Q+<ua4gU=qt`rM&^Ys@P^E)ooM)=[W"OIin\"T]P;h<UA*r3n75Kgs
%H]o-@_[Y%kE;f%HqNIhhkN;kqIEhm3ZS1l.LJP_U5JE)0G9+"F?h-.'lV@(@QnZn</+o?c2WZ5/r'Q\b_4Yb_lG%[[hgp(k(ZK'#
%eWXWaSF=9$B6&@Z`V[7Y@U@q`:4AEhh5u&,g2+1lp?Odud=I+X[G9jr1>X=*JNE2OFh:;2[U4TCKk7tX0ZR=CkIenh[PqMWbf5f\
%go0&b\Ek8dbFQ=ihST]d26HLb>DMT.?O_.#DlNp2Bsj+J3K.lYf_$d,j7mF>`E5n]+\,22`m*:kie;>Ia,4kQ-Rcu9aO$bRa0gn)
%dJ1ML4FR8*EW;7PZ2q4U%q9"<5<-D)PTjt9RetoMp8#"*^&ITW9k^lYbe']@_9XG0$a)D&He%-0]8c1XV%;CiC\Q"R6ttE5h/75U
%=/TuG%(,pp?U&joAhDu%]G11:Y5SIKIF?tto%:U6RBVMEOJ0nqpV'kdlYjO>2_L_0>]$[Z/&eDaqHJ[Kp''TPd>DkF]JlJ3j=u#L
%GL`!&SF;\nL*&=2DY*(BHjoW'J[gJP]_LLQn8>VIHrE*d"3^H*rm&(*pftHo.q4*TB>lt!k)A]_a.;d@m88o\j_$BQQ>St"g37+T
%mH'hmftfShUV5BrrQXHkeuIQN*M9E]?E\g_/qN;++!YW3?B;Bf>AM#5#EQ]<q=M7?^2^j;]./=,]ag:@]!MA6=kSeK5^IQoej]0[
%bFZIOn_8T<kbk!-s1VZ?p?Y:4hm&)l4W_i[RU"Y?bLM!BY$D+XgjCfJXrk@7hItWE+#q"Wd0@0Sl]q3hBJ8YV?E%1Wn*fgU[A_b#
%*gR/9H':<?3\4XEmTCH8q-Ml`5C-<SU;`Bl+"u%+``Dok7hD9O@IE2mqg1P[ghR_+>DMV5p!T"54u;*`(1%d54:Bt71U&fYZWd?1
%gaf!:kJ^Z^l(e6EH[!8mBWk%Oqp,c=kFY?eha-rBR0@b\@;``fT=ZX\h>8baH8Ab*-`Qr%RS(,C38::q+n'j7Husl&*1;1qk@3gG
%1[14+]ietYm[ofjml`W6#bQLuq=:XdVR0o!8p<?Y(\u+pYfut&'E)G/m-MQZ"Nrp^$g0\BP?L.g*%7'lr:SMM/pVoL<60Ilhf3uR
%Z\,+6b*`j=):a3'S(u:l:>.'s[eQ;p".4@NBG\#`%`VD-<Z<Q%U"]ckg=_s.2qsftRs7VkY;NZl"6ORo2\/"IH1Cn%lfVKE`5>QY
%qYji2QK@H\>39Gc-%mX-?<dKTD%H$o4sif$?ph[6&]=o9RU_mkG@$RV]g(rG?G'p9fW&./?<2rK]"O7dnUS;)K@2uq\Vdc!;T[eI
%CEk13iRrua^JA0^hhmcoI][kb\@Q2mHu3_dEj`nmb+\M_%C,sT#d1onXF2S4Gd4fVHoV,jFLAKn/sf5s\WaW+<SoE]+ZN[^[n=3/
%H#os!'_e-O;P,G=*BsVlHp0j8ROu8+]8MNK*_G'jkoRSmD/5\`+FN4DFQ`0$K/iT_%^J)cOT$!UnX1,]=+@m\8-P[W9R[;.^UBJT
%NpqEYCm:7[l8eb<e'!*7ipkuABrNOHcb+D([e9P'&IG<&*PnYpn"PHMS34JdaMEAP[l7BpNs77i]cQNLP5,d`g<oeOmG:Q4/E^C/
%/@R8rUJ>72psRkH+,C1F_5m$[06;H$kDq7A#0t%+mT2*HIZa6)Nul>/X&1'6g`H`S,6]46gOH"4"Jche3iBT^G*dA:>JN'Sh,rjc
%60U20_"N3I:["a@Ht[TuYa@SbhMa2X;ffo.4asbIJp/K++O\oFd@'*NCR<rRkBQ.glSu!9>fAL*g/tm)`VKJ&(,t@"b%5;_`NC5Z
%1pQDJ:\X@:>42$WH)Uj;DVi(LfC)o#@Lgo]oB,dD4<o2?bIl@a*P(_*kW!e?IEhWuN6s-CeZ3PkA,/0%Z"B<9*\Q-`]n3$P9h]XD
%%P%eY#1G\R1b@Bc/+6_fcWA0Z4+$Jjo8`Ebmr#l=j?_"%LR].O8Y3VC#NW&-l2Z-BM[<c5XCtuoc[h2(++FN>I.(W[Ue-u'CH[&H
%HI-N?H-sl(-j0Qr/9IdBojnN\Bm-D?s7Yi)]=:pfeLBo>0:2/jF\ePjj_@P]4Jn[pK=s@_dee:%3l%p^)!'KK*cC:M"hAOtpZh9/
%fZ\B,`Kg%D\"i>=gth</MZ=Z7>KUUE0>Cb694,I'3c^Z1T$;b@1Xq_[O')RLG_Lu#mH,YGMKd7_b6Q:=B'2TqX)q[kXsKF6ITa2_
%MR4JKoe0*9nO2V505^>O%3:rAiT.qpLRucI^0&Q]]Bp*Z+b6>skIfPe5C.O_pgX9ppS,:qj_dIC'bPg.@(%_XTLh>LRHkYZ&(1s.
%Yr5!Wc_$QL4.fSIgCN,HjGBI"o&;0h+Ds.CCV@E-D8CfS]=T/dZVNY!B=YLj/)rq'8!AX!/C7atiDqGO-d*!^"03O5.'mmkEV"N+
%GJ)a:5AYPWA2_gl^GGb_==uQl`Q-N:ZJ<rRgmntBHTPY.PId99m%9Tj<]N0U21$.G-G-(i'[i"+aKr(rf1O#"NfH&*JK+0![9.2)
%%`+m24j)YuCp*VP9@&i(T^5FcB9fD46to,?dT:Ya`hO0tg$D\hMcVX`l$#,!k@<49hs9'SGOX.1qYef94Kq:3k9"R_m&YT[hgr&F
%*i3rb?XSjX<=rq@^H^R.?G(>T5jY(+hgL"2r(7;P'Vci(%gh<0(:QQ"YEnUEX]Ni@JOB&<'_[IRH.l2a;WY*J431Ekk3M'M)MmbG
%Q-p:LL?SKaa\$RQcD;;36$7'#o?I$Q**J*GdXbZlR69hpS5st*iMobfoKGL57+8ri\$,W!(1riXG.ZGiQe[K0O0"-@Yb^49::Y`G
%MfnYs5I:$JrJf8$b+&'1BYoVOG.\kpSt,"[iTe#H&C8_*`2:EYRc\M5qqbYsP*)O!kN_qkM50N1's-jcD[n!+,_GDbi#<c(*ptYG
%T%Cli#pQ=WpTqj;-hiSpd^@C!Sas`lKut%bnn3DmrU'c`r]*#[Ru&-\B=Y_GA[S!h/')df9Ig[1YH9iG0B\Xqh5OQLjkRlL`oks!
%g"8Ar`QqVX3T^K?CYNX@CnNhL.j0Yu9n57_V='QhllJ!Y;Q&lP#PK+cgok%PB<1Jcn=;YAq6fNX`OTno]ktStTArrC4=aD"I!g`j
%oAjoeHVqDig)uStgaP?t&2Mc(687p*@MdLq92,A8:SYeWA@Z!.?J8>SQdUoO&PmM,4Y8GWDX!gWh.kuIf'[(lZ'RJ'.b_SU9a6)`
%.pbCYJ!7%u??+G.K\(.^m:9$N0LBqf/=ihgh"WioUZ4S6M3Wk:?EG,P!*K61=0$K.Ar,']r2q!F#W;#mGTncK#/1`U',R19H7c;R
%?eO0i;qg!fK.iJn><2<o?MV1oe_QtoZ_;i+Aa#]YJZq+8mb[/30gXEt<jdC4Fk*6:_Lp.m]8<<Q8JF>T3$9QMhUaB+\dIdB<.L%d
%/m$eMRa#h8Bs70!69_tu1lCu/h?k4U=5ff5nk+2S[fe8Of"H<,FajTXI!,s8Q>p)GVK;-:r6*6NG49h"cYL"PBrf9hS43^NnI^`g
%fH)=`j0\@"W1l4qhChMtNc\rk[MkL"pm9UW1k?/n?6eJ[k,*!o8["Y!,?&HXELE16XCP_tE.S;0TBUS[;;'2nWOU^)e/U@6(HsGW
%1nqIkn1fZ@[sX/ShJ3hi1.*md>1m6n=KW%Dp+E*L<SNpZj/)i$O<#P+!E[(\j]8cLmUAP8KI?9th';_dh.b*@7U:KMHCq]K\!*\:
%ch3/Mh9Y)ILi0%S?<"h/B851Y:&gg)i9R]UaW$qa#%$d)7?R"]QXK94n=O%Q-De;I7144b(U'GX%#5\1>sq`#>C&^cGN"OoRi2^k
%D)o?<d@JljM:^p/#A/PuL9*E7BpW%/AdWZ[poo[f(D&Bhju=R*@#qSEB^S-UNF7b\TT=>LA[In&bRI6DTfZ(t'i:=KbA)9YmrfC<
%Y<\8<8ob7$6X5HKaQhe[O\,ieTi)5)-s(;3(Ja//q;o%S?I'OIUe"jP#.-m5oKeq#Y^PA<r8QqePu#".\7Mkk3C.L@ijO-f,4n'>
%3Fmguml#/qXGEDJ/>rHm6]YlG(o^"YK>W"9)<HF#LI!ldcJl<\7lipC")"l?YL<K(3-..KflacQd;Z+nFpb(qUQ8n5(p^u?cX2YH
%l@I"tG&t=JiI2_q']iAA.toh`LBsD3ZJGm\37a&r7_Kf9)Gi-M6s\CDQ+Vc06F5$K6\p9!`"-Vl"iZg@H7uPLZ86!h-^3[A0aN)6
%$"`i<@DLM[GAuFMpoB"-SH,imqum9g(Qob\J5QpSO@IV"jF\JQE0RpCGjE>uYV`D?\Q5)ueP9C<7dT[.rc!>HYOH2?H[^'`$%KB&
%dfY*=IeoOmaC"sU)>11&^O'ko5@1L(%/f/DiiiA5;b)53oq4TR"k_D!he%2J=3RaY<:=nlXV)K)3HT`k5)I8`^0IU;GZ/J>A"C_c
%$qCatF@>?=s8%eBal+?1INi=5-@S.q+)NqgS_<f0mtN-bNB[\e)"]"9I&5R+J+u4NK3u7ZrNL[TA`,5X_]O1!,Pm7Absra)p^@,1
%&"gR%gWp:1R`!@icW[4:(OUN!f73;A*9egkl``20Im3?diu\MTTD3'6cfJO6kn7[S5PAU]>hE36":VDQgWhRF$/?r;181,@<\CJT
%n2oX-7"YVQ6D$#n$sP;&4p`'?kZMRWY_cq.!FKj\2f2rdK`2bR&BC4JJ:r>K/(91^*BCi3chrfX74kC`W5[&&bu,d3f!^uGNOAkG
%;*WOH7HmZlfJ$!;1J;S;CYY_JL64?hVIQ[J15Tcb/-HBia`Wn_MSU3H<@BT/XL+gp5[,=Z$Ue)LN%EsV(HcI>_#q&3B@r0G9@\?=
%b6Xc=A]FQf$lH2C7EZ#TMd-;$QP.@mkTd;;dj6aYn:QGMUC1;da;E-#S:RbMfeM'>-K#7DVDC#Df_uqe<\C\dKN9_uXL+otk?2*2
%-I^7TVJ:^f-8Z=&@*b9V"m3%f,Kj8*3h[uf\,jN,&kuqk"^pb/7j+`=VN\MU_P#ch(c7nbTQ"JB<kt$@Yp4).NgaY-3b#"*ceJqP
%'*?3s(m.3Pe.ghu`eLUam_]Ej84!?dIDTuS8$*=\OW`mP@U^?hQ73<P"jf710/=m'I<Z3mPt&'S@3YFlVDE%\Cl*:cEa0kO7O/M\
%ki[r2c[Q.@5dcK,8ns[ld/`S:M:3"_V.5qA<QK\5@DID^":!BKq..9)1*'&Q9YQM1Ej-BY;+OfP>F[l\>RH*,!A."nlY5Vglk,'X
%V@eXgD?:Xf1LWk"f'o)5B!m.mYuVh5@@5"%gt"K'MQ;aWE96g$RLhqoO:"X&m%7&A>F3?!XTDUVKB7ode,%\H@d?K&$p0@Gl2'?j
%pR5o4fbR*UJQ^t60l,u\RZ[Ji?l<b]*<E*-r7`-r:$RYX8)HZ8VAZlFq(8Sb&?T0@"1/<g!Z'8#()!@XI+]-,TZsdd_Ar]-#rDX^
%UC#,Va5LG)^gNk<"LSME8A#6''%/\&*>D2!*UI.r#6?g:(L18M.0j6s4-o*QkAt3R8Pd";]7ba]QBaL%"lb:Dh,HQIdkjg[$NgMf
%6AG`Q$[FGQ*4ip]L`qVfaFFT4Elg9k)Ss]26j\Z;%&(`m&1'gJB*P$g]b8L0ZlLQ)n)G3h%#nMNragO3JmSKM+)p$WA_t*pIdRF?
%qa2>-8c`1)jF8"J=+=k[a]&B@%8_V*ZbYr0,%-T]iB+eG,?_h."ulKM"qD8p@&U-)8SFc$n,qk;JE`T.Xj^*#PCZ%#)X612UXms(
%o&smGCDsdUJ`a$Dh0_hG@o$U.eH1M)[2LBP"YWY"V\,AJj\uo[R$qD]&14?\-?,Ps?`d]J"5O$X4Bg+DC,X=\E=Kf07hV1%369I3
%1T1UF.N0P*'54&R(harnMeecXi!5Go"(4FZ)lhH</PZQTYEVNo&*Zq^.WA,"]qMI7">%NJnk:g7ZUt!4Kus?[elGtM^k(Wr,Y*n;
%9pq]R%Yhr!hC(:uXFN@^"nBn1GS;Gp4Pg)5!1T..9nP>P'3g=m?LD15k.;6GJ*0F*@4Hp2i#u2:an\CtZ[acP+"BQQZ(Y"A=pUB'
%%_imM6t34R*QOT_<)H!gGr1LI:(IWlrl"u<1oVW+TL+j$bcCi:SKN_FK9I&Z,ZOteS-W\lF!\11P;:CC!up3*-iujITW'IOM1KOE
%,AC)p0S2IYO;Qo#P#;_"nGZR8Co+FHQ(S/p/dBgc:W%KZ@_k[aAlKT"5Dr4<FP3Pus/<'M%>i1,,>s5g+=p_"JdHo_X?aa-#&"ii
%dOepP<.?$BMM"/A8.fe]31Rcqi!GQ1dkrg25ZM3(d%.bEPRkg,fCRN1-T+N-bKp[GH^<'[i,iDm^*Wut7L]OO"ob]o&B)P\m:fhs
%eXd)0+=TX@kt7L$C%rVOk*;gtSBt)V)/,nh#QP,KW]_@BjWG+tW9TW$LK4C-d--d5;+GT?I%4js[K%kEk$&7P1US^>RTa*%"K?+&
%)!0VpGFTY&8/'Di8PNl38PKJF^K2LF9nCSDqXdB:ND_pe8tdTu=oA#._Oe.H.T9,X6IY5SEND_t'fCZ+8(/mIoRKd+?i5t#6Gr$7
%KX$7sLOfj[1a-J1H8HeTHjNM\B`58N4dn(U&Ep@N1ot>d5SM-qUUh<@ZPXoEiBO=Wd2na@W'_jTKMG&Ri0GOG-m[?Q_QbD`mnHB8
%:\:i!?1=q3Egt=T0VJ(=>9UZ1Cf3W..DV4k$s7+2!YElKrltO4KA"Cji%H#t&>bED+8C-[\9RIhYXuJNL4F2ir*khQ&DY%GT8PtG
%./jE;@&b1rD%,BTE!i<](2MGTJZI^d;r.eR9u)J)As!qe^WpN&(ach^D;Bg7ImbubIG75ET*W6*FT<a"5Q+\G8>%m]hS7A)`QosW
%OqkdD3Z^4n&3l:PQ5]c%WCf#-5A5eJKgpn52PH6AY""737LIn-i=-tR?(/Ru!X(h'+Ah`!.i/buJS0R<66d-n3/3%eHidScD$*-`
%_=//Sf>BYhQ_mT]%(;>8-;)?F'8).`M[(oU7Q3gk4;fnCi9l5Jj&ccM>%'-`72Cp5^u:FjNA<_mKN6At;W4C$mFgE)5V(Oh?'8^5
%3<GmA>R4R>3sOS7W(`q#ZI"kn[i2:>5j8]pd,V7<(K7*bJRO\6UG0XniOMo,AmADd(keO:+:Ner7HY*X0cd_1fE5(Zh2XECbkqBe
%fErNd'BjN&R#`RN)cj2*@)l\S!Y/YWi5!U1#O"+8R5iH.F;+&c!&b+gaoW)Z85TJ#%,rpR?qe*<J>Kc)`ZL-q;/gZsK?/?m(J(W]
%^4IAL(%?a1Eu%,K?+I24(M"N+i5:)oBdX268$O*r=qUZXn<cBH>>`R:9U,b)@Oc:t#UAC[1N99M;aftbP=#f:l62([cN)gf75Tqo
%Z:SM?`0h[8"Bh'^1nY-Xa68X/P7f;g/o2m2mq@=tOc5`<7#SMuF[9J1?rDP:/*%(l.RLj(#_=.'*N768)CAB,rf[cBOGZ[kVN,+[
%EH[@G6b^UsE2%;"*W<&NE$#1icVWXV%8=,OP@.k>#.]d&ikEc<[FC<h]&s+g.8Q3boFmUSE6CUNEPK:.J\_Uq0o"a90oKlUK%9<,
%_c+o=>l5<,73)+*-o?[A&]k83`aB8paD/Bs3LFjmZ1n;b(b@BD7#M2pNXK79IY7;II&53TbHGK?^(4CW<5K`-@[%bs,A4eY)S#]M
%P0l*;8R@*g@B`H2A[\Q^3a3F4TqX/,k"u@9<._mh),2o)2#C!D>oBge9@[t*#+N:lp2PTt*GfTuf]<.bH]W[uBF+I976b!(BbcF(
%fh=PE1HR3=HG;`0K1H_m%;?.R>iV2>M(%9-,/Y/q+T"C=9,Q_bpkMEP/_ZR]f#S:GT1\CA$72*-!DGd;&!;l!cd)o:jbTVt"4>fX
%ZLN/s_*:!CUki)+p>S:97'2'`,gc@<BE_%)TZP,mN25n3S,,O.LDUT\"#:X-N@f`"Dp"RBmj8SdL]K>Di,-B)OA$S(5u&aT+\S2Z
%fIX9*4E<O*p01YV@)R[ScpX13(d7@YXl7hrRgA)C(]aMrp9:;0_,$3*9V=%B,Xc\QDN[Mt)JCc;5rIR6Vb/;Ul2Q;LC^n.a0tSaQ
%nd&NhWA%BTedVHu?kKL?@6L;6-hY8l.NVGj,](GO"^B#\*%e$RSg*qt2TdiH[Y\W<@8khq59H&m,7!.KSsV-H$J)&Y;(M2>l@N\1
%:,Nu&I,1Hp*982TK2KYp\8]#CGZ,kd!2\+CAmSY%jp*Xk?0*j]`f(HAOh+"jK>1nN6`af,Bs2"I'9s*lI`2hl_ZZSUer'H_V)k=X
%!_UJ%5ViWk!)Y6fLlmK]drG9p6^fW42f'rSgeF0#K6\mZ@bNlYVEA[TH4,-@5E.-ha`*Maj</"6Z)/m)NWU%dJAK@Ue<t?]5q2ZG
%#b)Ir7]dhCK%V@7o`J59\/-5l^K0iJdMJt(+?jCp^*7>rV@dSYGS$UE-O2[PCoX`!9lYEQ<j%))K@!$8TnNVdW5eoKR`Y_VUB#bu
%7?(1j6<b!uTr$*ngEtRLbn[aW->h2.G(9Q1W"uO6c(n5C',EVUOq/m%*`&/fJrT44aNUUb7UU(kJXMXn&U\4B\asmDg]7'mes,*I
%TTtE'_"5]:Z\8btfLs%.HkDbY@QO'-FbW/NjF%CukV+S(CHYLQbF'YV$',NZKPC\RJ:%eg-fLH@'B!W[BR-9Xc\ZXOrTgCf@,,5_
%T[_=t\lt^.[CP6tEo7flGY2)^-ras3`cGVmei%*$!lF5m6@;*N8s,uMHgb2$TP&Q2*=KR"HD6Z*!17+@8?l>hpSABr>)7WP)Fim6
%=CT?k>9)ZQT0j(#nM">c+*p2On;hp(+k,es5.DV2pK*]+Wb1q5C9!Cq+_'.*G1NK^S7B.CIhB*`j4A9Z5S:I7XSr?r[k0^g;]6c0
%Kb>jC*,5IqB[E!`)'>0or2m<0W&*!CEjSS01h1@Z-QRnlJqQCEK-MuZQ\]1GIkTn#j6Hu4*ogh+3tb6/=cDh>W.VD$]r_oM1u`N)
%agQ'*-)#5lTC+\87R@b"ZY0(NM6UMVB+afMEF]8(7Uu3'&'3ahd(`$mEY+1+O`ciMdD=g)cF,caBVW@5b`)cH.YdS,TTGNp/h[+G
%*;$BU88)9@<Uqh4N7(D8j'f'ma2K*p3D53LTH(fd"6hEH>im0iHf\.7gqt\cBPA<YfM_)^C,H#39<g"#0Y3\\b>ZcmdhDo]/S)%-
%H4uSbl\7pAQD)@^MDb3fda4pmTEg'\17A[31FYb%<PPN7:`&INlkmPM9\0gA^hSI=iq*Y,9]0,3Oc0VKktDuY:'X0qU_Op]Yb7fG
%NfFA:=N"cYAXS917g@"9?QBYb.mrVD[2K7eE`-+!5u=^_P6'NuC,/e6@*j`cg')9q/sdGl!b73WR>mJ1S;+lb3At=<CCl7<-Gql/
%lj-,p&CVkZ?n6KVfN5rl%[bV]qGI`:Yf4Nt`5!U)9WHH9B'N@0DjUUlW;K[0U6?!DkrMNC&o-*_L0>Gh6^*AIg8'c=3nj/@d.&OC
%5W.gj]FnJB$mNiWH3-lj#V?0ja:N*eP<IR(7_XgqCDNc55g*8eE.TN?(C3TT!_anL0PKO30K.>)MeDBi8Yuri+V3cODG@IS-I*ma
%!PE$fVlE?h&TMndMdiH4e[S"6Nq"HZ:^TK?2M+:1KKWKGCNT9FYRC=e("NeLIF(D.ZJo;tJQA57/\i\Bq9m&F$c[>>`%@[k@V&sq
%68]Z`F+R,Z;1r+?BI9K$6P*Wj6&+OZVk?K?FLYsf=5'/-b(uNH-(8dabdQ`JQ\nA!##tL6!]Y^T%"h=.,Cgb$BXMho;N%EG0dZm_
%._YmTXLOp("uK6+VI>"3[*m?5U'3(l4JUUq76]2C1;YqOBH+;"#HA@M]qJV(4F$r4*4@5N*Up'1LG^>XZ5A%SV>9bIL_KDC5r_0c
%E+KkZc93ub2[J1\<fW@gMbOhJ:'H=hIpLJ^bblPM,uaQ+e&G&p2ApaJ-PcUZW"]`gUjt4lA1_&Kq7?g5Zr@^)=s1cmE%44DC6C\5
%XDm^+<J3+tKdsU4c:A0roOnpR;7KRaM)eCd3:KU9<85b,i;i^C86MK]UtF'_>[rtY3//6*KN*735APfS`sWtKSJB3S7cW!mBu8IJ
%)W#0!WG#rr,`]HK5ff*l5Xf,X,f<RK'Y78+QOUa<D-0@n!#('b;_$N\=rb(BTc]MK^X/@V:F?NU/;8RM:MMd^Ttpe'ThC)W"!JeN
%,4TnV.Wh/IpCKqEd@CV4O<J:OBX4jE#8%=lZddWhoQ\)Y-oD>5Bj49Y74Dt6#m(i0dn,aV&=Q:dmW"AG@Wl.D;-JCMV[47)GsNo#
%rB"`ci]E"J6D$c"eCLEb="k$`PG/0t*%TY)g`X,q-\CYirl%)/cUe?s'V0K5@Xo7@nNIqoMft_%:1Qr!30=PP6"LEC(frL*s&_aH
%-U>Pg!#s+J%6Ur4)WsGc<4O3N&1U"#KT3eSYrh)4OX-=nZur8<PMe^\rlp\Je?:PWF4AXiGqe';[OM==W,3uUV1WE_;m?kdddWnH
%9@AEFWJ4P-S+<D!T*:&RMb\=X@Lr\]a#c3c*-aVO+s13WUlk3Or+J!/-/LjB'^C66RH;$a<#\Jd0p1MDN#V%E+/1$b]?JD+fM(8u
%U+`;0Pg[Z87%t;3OAI?XK.6t'[>8D6Cq:K0@e[B'"mY03!3B-Y=')L8QH3/Y2@3-]VSIPNB^)/r>TnTuL=n?#%`?.anm/Ne*`J3$
%agP.^l!YL2P?Wki'Bgq)=?MSkZ$sR*a8nFA")Ac3dQVoP$o;5JiS`O#hZj6$<)aG6=L(2#9>%N`9iC8j\[QCZ%`mhIr52Wmg=2]K
%Rch7X/.6SD2DISqH<jo:a.TJj1=W!3=eSLr@<'6pT]fc3a,:;c!U+e(%<+UFKeDa*Wb`b^L'OLk=t,sKlGm`3D;pB?ThrKV$Efos
%DP%?n+QWS2]I9lR&_^#bm92AV$ZMK0>/2.FI;\%AUoee\dMH)@+JdFs:JIaI+IIo0)cE]h(`=-@4=l^1McYTI3RHm9Pn[F>GUZ]*
%bqU,D$ZeqI(Hb(#o*T<>-!nYMF?0Du\k_b2![!$^I3Pk'!a:cCe>^SkVm3sU!01TeEldGGUZk^6iWn@(PVuT6@%e*>$7h.9?A/;t
%Dp7i,Zh0F-2sE%0qN1mJhEX:.l!TX'MGQof'!9Bgm^&[>Aril_V<g`>n8t'B^C"!2bhKFf23K)V;T2R8j9"9D/OMsji(TLl[t,9X
%(>1W/)o@!3+gHto=_U)s-FXn@4^\&9-?pqJ@%eX:Ll0[+:,UT:6nb*AKEkK+"(%e]m_C2e^rUaUO8(N!c?j7Ba69.QLhIs<T6.YY
%,kb^P=ToKs(#*4iM=(`d,1<BZJQb]<Rd`I?#WE/\-6790*&4<m"4(q_XeZKr0Tc"[M9D/+@=aG<$5$KbN*n3\3cgH#5VJi<Rr#a:
%7l)pmpdtB/`_/LNfTrAR_A^/MTX/iI=(MoAajPh"N%9Ag;4q,E&3nHC-sFbnAA/e:PKk.5\j%Nj(1);6^Qr\p7FfE1b&oI55q=iJ
%:+VH#bYi`p=N+*2@-[^;'JGS^JbmnJ.gTlHVYQ<>&?hnXp.[LoF,4'E\Sm3+(M:Gu@(K(i&nA%.Bm?7u1gg/WPo0U(@+e@BJRKIo
%c\p_i.70\:2$7VZXunVq;F)K.Y0_g:*Xt'jU4&kS)AE53)[][^KhWI55<b+.*i/Yk&CK+p[o\;^A!+QW\GIc"6;N2D8Eddj,=<*2
%.i!o7@`&k-_A8n7(Lg#D)kM;Sh;GQ8<4WRCl7.n#NZ:tP#>1$?qBIo`Qt@N[U'_<L(,.=6Eo?[)=UZCq9%JN9L5H%S4ESUj*Uat6
%'+,r.L/2DXTEn6n&0(t7Bi-@C9Tp3g1CUk/UDPG9K/rC!G#k6OqU:"W^pq`*JTakdT4IdMV43!&_,&6^2@OC9ikRsGNB#;S;$#*(
%-9>T[9^)7&_pET8@oK)"WFJp[3cCAg[?\prff,37Ya9?\&B*kL6B_e1qLM*%p#1Va+:F/k!_4+XBI.7gM#kgHCJ:YE+QMOL6gQ%7
%4%O'?3Z#U@!GDe=dUB$8b:7!?b7*%H\2`]<f_[gO&=(NQRq$&:;jp(O3^"O"`MUF2"]#0g6qnTNX[3\-Ki(ioLdat5&;?rk:3BO[
%CQOa=o*]+IAX4B)ncKbh.QC;dk\_8Lf+$217%@._=HfOK'e9L9UF</f!d0rkXW"E=7\(HZ9#Uim`otnP4?03A.-EucdD*);1G(.U
%G'H+e=C7'JGm,gn=h_)[$pR+We,)@%]jT(k7:*QGL+tuFH5rP.0I9Yb@tOMiZ9h3?:Bkh(VthZ(L@ca2qN]F#B]r50FcK334bc@I
%Q<8-0=03mlYuXVe6rCfJh%H_VZi!-b'CSS[eaj#f6^:7Pn]_eDVSr,-A52]qBiPQ>A1VHH;9P<V,9ELBWNoB/@TbjM@8g9b9alFR
%I'H-J3^^=FDP0&J^iq49F_F9T/R/F1Cti?4&]$?T,ZTPO%;q!:@l3tlTo/?-%Y4_bC.URep'$pTWrc<r^M4M0Vu<:jNKktu-"(_k
%knbaPVA.OU@4@b.bhrXTNj^:5A4G/QYsRn[`Ne8iStN:j+6^!jBi@tF>k]gL:eDFhWosI'<CrrXMW4*^(`91b&=Ad1r>/I!L31>1
%_H#C+RGedNTi!,*(^pCSWG>G4"r8<&;0DAMA8F"N_8f`&4+ehMP0tktT\$FK/%,n!O,COYHkD8HkdY>(.0MP<c:JiE)GtHpKO-Sk
%#q<GSjC.]APbfG91%@H"?[s\%BreKS<O4J]]9sN:lo6#'JI&Mb>kWe(8Y^l//F]<W#s8K4(<P:pS;KNV`Cj<7X/h?)s+$8Ie&s[`
%#e?K?e/k8S:j]DK&1S[b+V'JT\Aj<@n/-WibA.sW:pJG9=!b6K2A'sW&-Ii\9n0+iYJ_BGV<BFl_"dJ^cDW.Sp*l8sl<%;o[V#C)
%j\Q@U:k0(2W>Bs^7FQY#dS*jRU$qHG&K4PQ$E@dj_0F[bSII)QrB&>fSQ-u<+r8WO(;N;WSWhCB=<KP]T)T+$l0Tk@SPZ-d$5GIe
%S3YRYTkGjeiq7VMY(g>sO3oMmoqkUa,.NXCXe>DrJ=+:*=L]N%"_cgS"sFG`SS;"mW@;*uZ6l/)ToeK,)CmKuo/.Yf3,!pQUDr#5
%d4pop7ujikHAG@l@i&sEdN;*EcW%9r).#B`8]8COkc,P%V\a;Ggq.-tWaeb7d'1nqMH@gu6V?WVd3A[J(>r`RUluHbPql5rK<\,F
%8Cl.k5eL<CEB/dJ4ou0e2uZ,/8en/%W0iIJ'T5efSMX?nMG:gE"LVd>kMJs,X4XEY.&E$Fn]4t`,o1mq#.-BKBljZ8Omg/d`AbUG
%?UqH?Om;oJZnc/7:=W#&U'is1aRHR:Y-._kG]p9hN&rp'PLsUnW=Umbfgps^#H&nW=`fo5>Tr!O`)_kT(3"aaHC$Hh-sjlf8[No5
%oA\P<o7/JK'5B9E.h"QLcDa^W=5O&g$)Z7__BlOa%+_drJ9Dr?A].1jDC89;8"1WR!pYuMCCc/:_kJW80eJ[U_M8SGjGI_p`S+-C
%+GG>t/?Ft].#LS;YeR.E0_)+i<Q_2]_PH0nF[;X7pbdHM;X0o1<3a4<+;=m5l!6b;SdYtsJKQjn2#J]MRTRi]%,9D2Gh5G'=dCAk
%92O.B\Dm-Q+\LjrT_'WB7>b#<(_T4m<2q"i2cqiohabI,$@L7EdObFP"aD4B1B?3MqV,Q=mcitQXCVBgYY8.9&<j'Z,SD1*UkN_I
%K\8pNGsWts-q[8^jKoG$HHE2m/[eR=3q6(']YR-n<h143[''0h+ZW2a,jfKt".>Zq28eot($f[Y1k*.V!+:11X=JFP8kMg5q*\&h
%Lj5E7=7H3O"J%qjZ&!q_*+TX@QCa$ll"O'B6i%ABr`8S,pqW_Pj:D0:?)Ye07A)VOQp3L6mZfUWUPg?Hrb$4$Mp/:#:jdR!:WVh8
%fqIu.Ya&.4NUWDo$jDoLOkHG?=r%W8"e>l7_0"p+cj,l/ljaekkmG*b=*R*?VCm@[s.XCU@O@K;+00/+]rf*<;#R9&+bF@TWW7S5
%,t"M^=[c)"1?FI(q('%gR&ONT>B)FiFq@Uj8583)@p'7d!E;Z80].L0(m/9K@SY-C@)2qb'4sFA7Z=NEZkumu7J6VtfN>;.9fb`W
%KIVVR_F8:k/>'m4RuBEMJ^JV^#k<<W8eoh'r=6F:JOM9pFVmP$-Do9@!N/g:9_i3I]n5mWM>(5.9P-D?Trr`M%a@rj%te0p:mWmF
%jr]n!i^-QSp4<LdYR?pO9F0!t(O.osaTY\b0(D@s<Ida,$ECnXD@A$:Bg*K4hg]d9U%<e3^Id%3\Ab_';+:H*%??Z4L*!.TWVotB
%<lO;m!ZGou.>1TH-5B![.N7dHdg;=XEj]+ZA>YgZR6:[Ga"mo$<_&(deUtqF?[1Kf1<^6UBFWGVFD@NH2h;*CJa#U+Kb<h!/6*<G
%@#G9)'*Z'@>^SVb>VsYVTLCdJ_bONi`L)4.Z02OeIgK.3Hg^C^M63FToc+@B\7..<(n.L,U;/:t3]Q%6`p*"C4G^rj'HRR4AtU>q
%!",b@.H(Q&+fXB>92i&C!7R&sh*'-TW?XI_2t4W1J&6udbPbpsb+@YJUs-hG"<D]_T#AJ!=ZgPqH]GOAX_k*AMa@)R2-W6AJ^<Hk
%YB,'nM<JDW+JuGQQE?b"YtS.L6g$!uF[W'\B?Za5n7;pP[L?/IU.dd/1"-Eo)6eEoYs5rJL.PBLfDV&S5[!)K]F%;AD7ln7T5A)\
%O^]Mf9b;-fA2(m+#4.,-+sP@o_*a7Td^GbQ'SbT(gb>Zt<C5W?EI.!%U?APM$!",t(K!GbZ-%\IKT<3]0[bHK'oul'=4m!GEIl.G
%o[F[UG6D_7r:<0I5HDiC@"7AP@$@QGs,n*4%oNu>f;Zi`Wb#0?&XA1P+JV14'9DMu4qci39jm6cKjhruXd\HViIX9p4WVB/]F9i`
%E"S?M"3)Y;gs=+f:B58_LVHcgpIe80js6k_Vp?sfO==5gEE/TJkU^tENbTCWedEApV%84S3Ft$4k5X>q[C'am*7oCcrkj"9"G9%u
%09>fdJKuV]\JSf8&B+*H-"pgZ%Q==\l*XRbmbZjX7uF#sE<niQAnq%Kqm*i7X/f:'@Tk]S@)VS5iF!DD*JP6]h-,.!IFf*t0Jhhs
%Da8QI,4d.MDA,;8<k#d$@X<AiSt3]E8>POHaH99SR0/%s.F]0O+.[.ULmUpJogCdiB1u:N#3uBtMb8m6`4/TTR\*3\70YsJ"Q$2g
%@=]nZ3Qpr(jSCS3+GJ!WpRL8`QN2Vu)&M#W6Xfd51'8`"E"++;FC<mj]XF-0<>bZ9]5&$f(:&@_TtHaOA[Vm:0!%ksMV8&P4gkO@
%rQ\*(?4AVO(38b&s!,09JH<3)"Mduq18b2k!YC&nnRl*HH.,'[$MtrT6Sp%]'\=J)A=+pf0(#A6c=*A'AKG9*kJf\I!`tHf2MU+\
%'MAqY`!Xdb/JqeDFb&5-6_k&qYsb&880E8dPG_P!<N7g'\L`Q?_oJ^u.Nk(g-'B%r1D%ZL"&]Ae\f(3$K#0tCKFZlEU(T$_gYl0u
%;7+!q>j@Gf'E--5mYY0,"ELqc5t:?c?-$r!;8/kF^Ya&cXC60[7o5Nt=9clj9gj$os++GX<Jn[R-u0GD1u]XA=9<^kPY=H5q1)HQ
%-K08gL6M&4,j9h3bucOukN)Gk0E&J@hYh@q7QcWsf]l)nXNV53TdFD9)IjM]b>BJf*_Bqmid!Pl)OQ0q&:7E%)cE$.U`kD%ktU0S
%Ko7Kt["Zn:Lgle,bonE*=VW>$!6clA_9(bSX-eE7feC(pM^:++og9Q+ZRQOXMSYO,$Id"nZ.j2RJ1ZqqN7/Z2E>Q4W0]C^EAL_n,
%^W`1O6\fW@+DF7:)f?`%JlntFBg^;*_?LkS[k:1R1W4bm!`dm2aVE!abe7\dO<HS=DV"_Z+UasTTT/>pL5%,GjRdCaBo3urcSr!T
%ej>5m^C65)FB'23;!=`*V\mjPQ&cAH-Ctd9Ff"OR`)%sQTm8GXH7d1_VC%Wm`I3]p*@ds1)7h.nP^BV=`i%3[_:P^NZj2nm$8CjY
%GWOF,nPgpTU2e=[(C.2F5g?*U5k7IKJYrA1%OrHu*UtW[/hi8^"GML,1aBbqLu-/Emg+&Pr+YmNHZd-+)HJSC*Jf"GBddB%cQq5:
%[(53Z%=B1Iah#;^e0We4Pa<APLnJp<V2cVg&t%3irBbG6!^;?9L`E1=3(e4]R7E[eZ-`9+LjLK3M:EM@IQ3BDLaoG?[.%d]nDS7!
%`AY39&2Vj4pCT.[r'HD?]b2elO->=>D3fMKJ,piaY>&SFO\A@3WX/\B]A9g`_P!M&`5p.=dc+maK>h<E]Hfpm.Q>!._KsV7LMAFE
%M^;>7Yo[P2f"'[DMUQnf$o7u66VNXQF/p^#Ul$<"au;m+R+4r1Z,\\N$a6`N;m6W)[]]4gHmJ[Tjo`<]P'V(B:+E&Z<%nZ4i`fEI
%HPpqUbb9h$nK[eCGXdg@EZt;*ZOEYCY_PbRP1"f[7GSU]aZq`A%1]nDan"g*!bB`%b$7Y5!pP#GMYQ;[.O-XfK?2&WGhj"WG%hO/
%;WO>+?G0YMN6FZ$LWBI!lJQu-%HD]hFhB@@A*uBC2M/4kG`^6K!mr*BQYbIAb8)C;L_Ac#^nsGD_$];?a!9ladgT"qm40H\ABQ)2
%N'V[#28LW.gWDt"5DXDe@Pud'Q=uoK-1rfNpU%WY0s$c:AuCGhj65Cji%^&`ZHH)-jOR_>GAN\=N2GG4Kn.-W<O21#^:l:B'D;5B
%,@h8,G"8g'38U8LQgH+gg*n^o\IKq@/8e?J[kGDO6j^-8Mt8atX>A=nA6mj`"m.<?N(bM^+QU':#0=f<X*V[/B9E?0'7d/V!5]=p
%@f\\[E/NnBAjD<6qc94V9GQ%Xep<9I'i1*GG$I"gm6htJ#V&8QD@TUMZl)VZ0ERR-KIDciq=HD>a@s%<\GCL_d-kB#WK=[<:sH(F
%'W)ah+]S&86e6,V,6H=)#Tjh2KM`-0$jpci]Z8j=ZjF&-8/MCFR-EGnMSn8+-bE2jGb$dj"iQiJj.?<i"3Z_^p*c./4rR\?aD.L7
%_69>TS$kYAe6Z;_A$)I@:[gibQBF=fp-#aX#ZLhN]=e]]p*%b*N@qCK9DVWn)52*QqI7>s`u`$`8=fq%p;lGbFGol`Q]:DB=?G]!
%+)X1j'=1?b'8C=eIbW:e(?+"UDfc#2'n%r,6PPU?lLQ?ZL6?Do9`Xon+t5!tibc)Vfa-*N>#nSoU3e`]'"/$ROU*,)f-t4@H(lgZ
%jcR1]l5EQ)*NWl!$ODD+BP\NBmLl1PU7j^>>FKtJL\&=[EDMHcPD6h3*GEJ)pQ<_3)&o$SAmpibZaX@]jIf<2R_:7D_G=r3D&.Xh
%,WbuY\*G-=PjidiW*XWW2Vua#/N6_q=?YYNA(["^5uk#qo+,`d4/1S#_9#W!E'M45>Th[@!<%A6?aNur3R\Y&Loa]SZ1pAt-SY:o
%(3'M7iE/Z7FlP^YQ1om5`PP@$;jX717_al*2r^BOp@08e0QDu-6+'A.[YK4=";lm/9h.!2PEJ6Q6dUh%0P31e5q*T;J/0<N)%giO
%Detp0k-<D\]n3<t;sgp0hPY-OLMh(&euIHnN]ROg]4)eKc%7.hQ6;:=F^e4j*30ao#NoDli&-[`95pknk?*o]?SJ9u7VIVYTW$OW
%L!Q/2S)^HbCcr%Fk@+sf<YZTf:2jX7_YrErX[-kn"e*GB&OS6'+3E'@;TM*dp>G/HAdWG>0&.7u'[4ni$jp%WUTu<T':G$QE=To.
%KNB^-s#^g030n@pnDIo:gB-$\%BAO3)j=A:OgBghD!"k=[n8;Nl1I#O,7=cS(HXYdE24>#DtHJ_"\jZj-CLljiTKU=#R>uF-nILm
%WJ_4q=e$OUCqVM@aO#Z/#9pEl#GS@IMEp8?=19bm=:qg+MK)JV8;Hs!G_X\_2.ak<1bfn9/bqu%'=@"d1nC^RZ9hJh4m<drK'_T-
%$c-e#H6_XPamTkEf!$R&bf4'_*cBbfGjBXfX=R#n#:qmW2LWd0;di[eY_h`?<TjnE*^k$X3qQ4TCN%Rnn!/Sj*G<Y:5WnX(O>5rZ
%"OigMdd1i'i(<f!+mUl8K2(2PXLW#?huS\]]-1`01Scda=)8BkRPrPTSV_/a^&2c2XQP[i!0!`da_*^7O)#.sP0WV_D5'0DmN*RH
%,fhdg2"l?A8LA'GfltP@FWd);;?^&g*L.rV?ZF3W]b0U7R@+"`?bQcq#@t&%<`?]"5%EM-]'r6"f1h*29I?JekFIi2&>kBtbq*AP
%Bk7AEdXu!^^=^S%1WGLHZH\'_Pg"NX`+6ALU_sFY;poj'^=+aUFkMjM_j'L`p9OO*`8%?;<__C?W-$LG5rq%<1+r/V`G?87@Z/c)
%h6qIE!,\s::.p-@fJKnh'Y+]l8Rc5cF@QS`b+*"?5*P:mn\J,'=c\tRoCtT%B/k!#RHh9ej(7pP+OGiRenbG&r3h-Ra<HB!g07>`
%,5sE[ZKfR+_#/0kD4?;GK0.e_JsT;LCS#K3,A'rGWO6.P*Z#V7W&Rm*0oNfKOUFlr.ddJ92:>D-#(%^D?KsAPPQD4-&Y3@YAc)RI
%(@A"?\a?9oqZ1G$]k2#+<a:tL`?GN>;4b#%P`1*IDP:Id>$A?rfj(i>47`g`%3MX\*R.X@RfUt'`pqO@NemYl&=NaK!.S4s`5'>G
%YDa(<Vhnt<h,IQi-8"[JL4eZ5Lr"7]<^[="\!W`J,#,dpBK9`5$b#*edqf$mV1)T%B[bO-hRKBk9f.ti3jdLk3+8?U2IoaJ%gqUX
%M=c/]X0/0b[5e<ICFJ5_9`qmLi>5aL`+j0YmNPnB?FAV2c!6q\qdpnUO<":q?fpWCqXFI=8DhU-G4!P@YE=r@DY,l24M0)7,\1l0
%__F1TcGVVDE_B@a("U,9lR0C\Dgg8$M!a`NALNGd%1pN%(M3:Rq:ke_A(d>1;_?!3*m:eilq/3/(W:#.b5;=kW6^m0;,k-FG\KP\
%IG?^mWt;O`Zj]4;%bNLP.<Q6tF,7L"#9Ase-jYK_%CM/96(5P^Z4OkH#^rF@&?8QG7?X8])'7p?6]k3a:D9p'=eD(,RTLp`1M#*7
%nd'?<Q[/THk;'KO/,rW4o%[`(fMZ$u'iSXCJNcaaDCr(IebZWfGH!C?^e\mS<?Z0LpPgO=D"bSHmr:QMEbB!p7HNNka*G>'l8o_k
%gB*)s8c2;T8f%=)daD[E22.Gp$H&!-OPk2Qltom/Z@Ro@Hee8TbI="a6tQsE4%Jnt:K$#9Zl0M?j#;.<a!:_Tij2&\QI]4T*;U\)
%M1cc7"jg"V1%EU08!"F]\0WlA1!GBQaDbAHQ.2LFJACoD()+8OSp5bhGd9EL,DS.27\^A?B2MuY"UDWeB`K&pAT%,mZO0U7m6DB>
%CmefN2q.>W0Wa_(mETs(=fK!5'd'_](;Po2c7:1$,g[@&>Up7JCh#G#'/;f'+$5r]'Xi#/Q-LPn3_6ei^Xr:\JB3?g&plnN>UDD0
%ina?*(&TZ^%ea$414,T=A_<Wle2'TrPg8?W_5IB!bflR%^H^jFA^*PO<puRY,Ui\SJm8-Z#Cr.qa6<nt2A;%:(?2og^hh,l_@D7W
%?[*>LG%*]H;C!J76,B\ZMK;)fDl,95#3A:caiUU+">c+H%OTA8.R([87&u1:]$*/B,#LUt3s1D*)P9,YP-rM=1lqi\\7)g.:-O)f
%LO"0ofuO!'$t+`s;Ej5+=R$lDh(_&a?h+iuaQ;OZ.B:6$W,LJ/1%EZ9Z>U$l/":g&WuMq>`n@D0[Tnq(9bH%l,-V2%gWWH*01[+b
%Bo!a]$`F;pn6&]m-CZ9hA)]pJ%cQINa*/m*EsOR,UZq8oUP45KpW^?u'WhK;EjGB*X*>nd:SJ^N*KuLhSOmilMZlZkh"tNGUoM8a
%LbGXMo7,Z)R;,DZ4:$QP:!fMP2O_H\JH4b5;Dq&FR#L`\1VAdA3o8_69h5J+>-&H?5GRoW?eJCJKf^F)F_o2KTFs6T(ea3oA?Ok/
%d"?a1&'t0[bSZ\D2Y+AfYjt/RgH?:Y!DtjnRje0*;L(FAbR-6qOq4@fN]d%BBU&Hp8&!YB_E2'ZbqmR#Q(^aIQ9+\9J>\CuOIL[q
%:.!Fqe@b1_pir+#BF(1H_9&obbe!@:T'Tl;!AKh,78tj"jg'j1P,BENd5mD$M8q]`b(8G,lcN4S*<E%=+V<-UIM$*sQ(EqN,^HY&
%;lTn-8FgG+9Q`AK4Ac6H,+fR*EiND#%m)d@!+(:Q1]+1%oEHbIa?1rARKgkEX1MU`k)E0("?IF\rBQ75Q1TpHf^'?b*g(?(ZQ,(9
%aV_I);\X=tJPsUMG=HKo'[u?p^]R.U%7K%;-:[c:,Z.5Hcpo`q!_PU]*gdW)7%Sm::6UGtKR&BbJjNF?SD(5nqe6&'e$Q7J1-K&6
%.QJ3<)YTmS^.uk@cME4t!&e1m;R):NjA[.CKj;SL&X-ZVO+SO+<C<E^6%)96J-6rbmeaEo1TIctBFc6F#Ajt$4+Y,e?ngYYKZSL,
%X!,;%kaJ>QD,>*UL-R=;-iqae!6AfT;H4dW`@n9&<Du(/XAc$5"VqPVZ3Naq5_J"2/G,$ZLNO$skA!A7b![#uUat??352X71bNA"
%F6)eO24R4gJhq*\;VoMAIh]r'1Z(BR$k%N^aF*E9EkAHE0?)bgCUdB?aq2V?*=I<U5[Y^LE\nR5h-ZRkL)>0m"[tjifboli9Li#M
%"GuZu^`,-?^L1&318rr?3\WNSi$/ZUgM5&?Fh+JQF."2S^]eZpaI>s$\'[s!Ur)dK*$J7Ra(6fD-$9<!f8RD5OD'Gt-V'R;fK(?/
%OSVa0X5HVm-<9!#8+cqFJ(e#)4Q)YFq*loFUhrEIX@`d96cSZoF0RHBY'3ElToksbqY2X@%pT!n?5jq7gPPp!e'ug=3N2nk@;8*b
%P#U^X:+`hM(Cfmm[09Nr#L>6)[_U'^1<P#[J`T^*ME/#p0#$SohMgfRdf+"rYrQPlO@eUHH"sZk^p5h/T-dY#&,Z0>'@.>:pQ;o.
%[3$JY'iC.XmuIr3OTr2ra1u'Xp6R+tDu"FFhN3*NBX.gFQ,JU_;h`<Q6OM8!U'D9la76WqE-4'hd3`FL-Bd.-Gh)-$p9ni9-@35i
%bcFk0`s")*7(oRS@4qf.["&R=b0>90H6!4!rpYu@T9i2W_ZYf.afngdC4,CHP3erKdUP='L$2&LH;*%85VKU;q/R2NId<II^1HRT
%L(kduSR6V6;:q[TIO:]*=:WS3*rNQ*G]W-Ii"F]^Is6>Qlpp!K_A+%6d*Di?*tRe!Qj>JLi/mK,*tPLa*j<276j>)3fLRE2)WE*7
%4i_9n7!,sK0hp$:p>?R#6enKD:FK'Zq`^UbO_oo1.'dggp>G5on[cn7jq*qiQ]0r!(ug^1]U1k&NP-5fBK1a&MeG4;\4$&1hjkhl
%WtkL7Dco!HA#Gp%7SNHK1RpnHpBOb)O4RZ,@RF[hV\i+:+`>`]o8%a4lOQ>c=LP$sK1iQ\EKe[3+_?C--*-35,MNcdiUu1%i9K7j
%]$!Vk.blu0@']Qq0@F>2"V"S"Y]ZL;FsJ(jB1Agf798@4&d@\]8Xjg^S]'#%kh[WmUs.iY>n8R82G'B[NXDV&r-9<!NGOeX:lg66
%dd+a"_;f[)Oj$CCEtsMS<(r?'CQm&S=IT&mH,.3n:(M6:IIf#SZ.b>XgeKA8CLinkB)KWslu!i6YIfh52UD4)PX^@DINB[Ngqf&_
%=s)WXiPG*sNs@V+^%"3QPQ=2Ka>Ut'17H\&2aumQXp8#5kNf8q\Yqbi'$_Y<dPQ<"BW%$&+Wd(h4h*n")rd$83Q+8g(2l@n)Y%U!
%9*MI'<sOf<>t4Bsq>j^d:=ec[OuDPEHR?TV5"niYgnUD^>bZ(u2X)2]B!gbYp8sHoP&dt#g?l`,_;f[)Oj'YN1k"*&97#seU\0$o
%YP51)QY>-uS+P?^8'fd6?&e3_q3[*5i9K7j]$!Y,&E+Yuq8&`WUsi)\BrhQrpi_:E#rV_[i"Bl2bpJts87lUah!L?.Oj0Q@JDSk#
%H>n#rGhlpV2T,Z;k_iTT8S?Aif.U43'X",7ZZHjt6enKD:BfDtB<u\qA/c`8RQd+8>6g5@>t4D4%^KXH1Yq>*b6&U[@*=3$n7p.M
%#F?jpg%$Dl459<S558O/:XRj]?Os:L`euE5gO2-sl1c=s,]1tW=]tVIXTc$P>bZ>LZAqeaQ$&%6CF%];XS(N:@(`SBa%:UKQ*i4c
%qkS)WI(;T2PI>?ulbOl>G?:_QPj8[!bf/.(\@Y)0#?M/jjU1\C.r-T?I?HL&^8U.AP*WO^%k^_j;p34[Q<HJl^,6PkeFIp)FYI.O
%np-C)o1/fkqPGKr6`/A4$>Lnrc"I,K#V2-AF0/4m'7)p_Mi^qp6Nk=jCINb&[u%C;@^N/"L>75#<$2f:Cf\CJ`n*4V86?fhfl-c_
%1RB<F@`V)s"\"NY\`kT:;Wr0N.X,0$I$)/q#T0iZ:c*eJ-Pg6$E8hIF*J`7qc$6uXcLr.($dr_JO6l)M:o^N.Z"S*N6^70G``tO5
%;WC_heU%AmGo/]JI\m>8MA?B2?K3E#S(*rCji^0tM1pI1:)C+eZjVXE_us9r7M[t>'e)AIO:G@f\<'/m3iEg86>EVd;[#l"eZ;8h
%.#2u.42GY`TQg^;m:NkHqjD=Kjb),:aU^CY%>fq/@]0'K8@jI='_>:(J=AQ7[WZYIDf\p=J&.q"Z/IuVUju"On<9(g8=@%/S2\.W
%7O[M6pp?f/hgq6[A*K'?GVG3=e(78t)q`Na1`&ob[E%5;[CB[FE/G6"c%U=bPO?7OA#VAc&(2/Q:;=*3YFTsnBtT*'-JjQjg:IKr
%2MQC+c2,`J_4RTDCj."DZe`Y-RcCcd3NXPMER;Oi`U$U#$2Lop5I%I9g4?P,n"_@:S@'(LhLF+^CEZl<<pp2*M*NU(i5lm%AS_T*
%9a9k58?0.saK3.O$uAkbB;A:f:BpTlJ-TMGZ$pi3$5c9H,]K$@$"^#ti:`;1"D`[AN"io)3/1[I!V+<gjk)fLM329Bp]$kmml5#g
%I/:re`a?F8mbj-#)fCJW]Ocij*An1#EBFZ#CJ"2./kCaoBH+e_Mnmnd\qOl3hAr4$m!1(O25T5lo;[BXs-+ph8@2*q_Iuqp?'mbg
%(8-2`4sc:SWe4Q-Lr&nd._kc@'nE7QSKghj9^cdd9M/q0HC.g`KH.*b.>pm4MDk&<FSTnnHo\H^E^aT05Kk*S=XUHCr1oTV!tUI0
%b1)PD?mbmff7;1Zjfj[_=*"JU8Dr*BR;2f0k,=mt.nBS5,]G9C,SkoXU/eu$=IN'gZ)P`F<dch&epM=jQ<K8;4-7!=R\\8U@rA;t
%30kCRdpXN(1b1^iJCn?:op"!0Z%;PuD-OHk6Q_g>r(%qp^hHqr!nbA,^jEhp0@@&W.o$Z*U-qMGTC^:$[+OGGeS0"32l2U)+GRNm
%3DtkF:3[>TkdPV5?'jG-B$'sqgEM.I`TP!]s5PciJ+_!WIf:Err5DHJO8R+,rF0#]IPFN\?T8`nI-(0Rpqq%,5?KCc4V_n8.>;K8
%YR!-O*"8jP&2=F8,qEWmE1u:c.ETFkc4ZTh/^YPH"Y$42oKJi6Su^"NTceZE?Z\#A.a4H;[ZnL'+ZM%Hf"%^d=i.t(iFB(?i(R$K
%R>KC\%gL@V7\U<hZeghu&H"Lu+6@F'(-2?=/2%bFGa6=TJfS;O4d&7^p+>4%GNhqdR2:[:;O1h7@7M+8+gG35+O9&SbmGM=i!H5<
%i1620>="PgTO'+t6ILJq=(s'!IqY>Xc"AN(R`akkdU"C.foJYV7c:\rR7[O0.P,sTdSm"lb!B0s<.EHO80S$d&VRej2*iH<8Jmk<
%fkks.dLLCG2I"`=c;BK^1Z8<ifHUkD@"*/S;$./iZ]D^8cU!5HYSNqaMUW3\%M`;4&s9!B]Z`%;b@&T>U`Rn(85HF4Gu]R\a>.>[
%6uIH5]I-SlB@&q<Fi@:JPmE:#2n`e'7[q'^e"5u9HBYDm/gnD(OiX4m(e&oMNC.X-(AH?Snrf1XXEjYQ=^_oC^'.Q)-0&^jHF`HD
%@7m1-@u=mJ&hE]B,P3j^DmTTtc`*SsL<g@a$M.h_mh9EtinP,Oj`Z:Ae8^OOQ"\b5b7p5:Z8,pFr$`=L\%%ocS6&\hD;*O8q+.@7
%88XDnSV$VN+YBep6F$jK:_7V,6eu5IJRau3_N:ueP&3O.2\Q=d\-L8-LD(nRje=lXZ-L#<#?]fWg!SG;Y(pjcW^*[k?js;s=EfMc
%]>,fc::j6^)6mZkMS+Sa33%RVV;>#'^[]skDJe9YCu5:d2Juk9rRHIPRUpkP0?jV7fHOE4cA]5eCcTa$$l.[D!hk?;NdoD1#/:lf
%'+;f;l+([8mn%q#`a;7UOt.`77g9>A'pOV'S%"9c1R]St6IH6#(/#`"[K[dja>qDO-\JmVT3+p??Q5WVF9Y[Eaj(K3*?j`@gDQ66
%WD_sb-aaF$>Y7q+3)ul1Q@\UWBPg^J!J_#cRQIV;1:7Q.9"YlgD4PI"#Y6UG7(GO<7-%+3R5n3I8L31,K&t@"E/9TARH0HS$Vrk1
%df`tj9?Oj!U3#e_N"FXIW33V?$@8+BPi/MB_=c'P5aWf%=bKZG&Iu<7kJf;h6<k)oL;DUU,Uk1r[d)0+.'m:_FaGSRm#Re>^clMH
%g:S14@$.]W<)]"29nP<Z77C4+;,\1';Kr[`/)gP+MI@RqBs'^GD,[%[!4mkE;U14YEWff(1dM_Xec]E:0Z7d/R2BbTdANq^b=bL(
%?VihVN,7:$8Zj.Po)rD96n-c6(Z:@efr2?-c[5Lk0<A\\i1mLV+A-/PU#&TR.F(Cc0`=GT9MEH6#B?epW5W;0p^Y@n]+VK!EHuN3
%o?kBd>;4M6M:bgsU0)5,h#+.DXcdVZcG^,dAn:l_2a0,GpF]RFRjme[[lr<i/:_!8s,^O0C+VP1@0;]1gF`fC[PWu&P`gSf@\T!9
%`8GGnZ6BDQI@b"&_0YWoBmGjLP@#%NS>]SXrQ!ADEI#!t3>C\0rc*_5B^*$`B\VS,7;G;E^N@I)/&j8rgktQ<2lQ+KE([]VfKW]`
%5"oHaYciRT)O:1Ve/;6p!#T/rj$$thhU(CnKKM3I4cqOng$(9.aN0WW?cLl<KJ&`+bC`Kk=aZF3UETn.HB>98`Q!UIQ:l.>F+]/a
%V%^]Bhi!dBcb#EA5+QfbW>P!G3V0_3#27DL?=;3T&qGjROZEdoY:STF'`=s\?-V8Y#_UK831AsY5kN5;aFMde0j:Rb:NG_gDEue!
%olEc]8r#r4hMsjH"g:D$D;GMMR_+oo&oI@I&9+>*QDOs]?>F\&WfiP4aobZn5J\]Ni<b;Kqd#SJ(FeoL_(ha;MBbC74>e,b9dEU?
%Fjs3<q%XB150QX[g"UF4a;,4o+VWF80IR^h_f-/VUMT,6m.5r?U8c`1ns7'[#Z9mlnDc)^lL9XO]7sh/2"/Z9jEVKYNqCiod+kQr
%c]S@@\KRNn.VD3t2Aa7e-tiZO's`%IoH3=#Zn"aQ:]n$@i%[$7[NN*]B;-UU)BH59)Th:+S:DEt.gb`XYM(>;piEZpK;JD5_iLXI
%NsBUYe>XQYIR9Hs_DG>#9aq\n)EFdpUFJ8^*U/3RdUQu-d\DS.VmLZV&P4BGRgo1-g!5.:nfgtkU*9[$]#iN[XK1cemKc!Z`5TiX
%N<JE^/jfPjFp/b8(iQX+I9rn\1-m]+l*JSS(SWA"_AcAS+?UO9Ua#sVMI/E!.<Xd),'0]N.P,Z\ab8:oa9-g%n5m%RNK@O)C7+3e
%A9#C)`>jCZWTq2$W\:R%;%t9A0710VL^YBGUEAQ-:mRpJU"qRa/CX91]QN]2(;`#]<;Y'5oZ@#IZIsJ4ZQZBo00fE2bilk"mM4HI
%IY@b"j6mNYW%V/dqLIjYX>#7uFYOFRKKTo)<6^QC4ds=;$2<YOBuiI9jnR<>%GC3B]R0M@VgnPUp[lX)a$9Qo<5F4Epqujt)o&pN
%rS#/M(U^f.eeqa8[VtQ-3,d'B!4#N;GFTRJlW[0oTX7s*oG1fpOkb`nmtFXhb(;aOKgdPXPhY.UWFoX7a2CW,SB(FBpgnO"7J,SO
%-'fXig%+`OIqAaX^io'deRqu'aGLC/l.+f>bKQuX)(nF*[8d^WaI0'+nARTB-+2#]T7k6-?in>nJod_:*Y6e2=SGa<2l`AH>k<7O
%.^2eW;LuluW`\T6Vchn8,VFa`i1D\P_7Xq:#HobI!LHtERMbPJ8KF7aM5Bng9%S^MAr0L/5U9)t$J%;8"s:$9ic5:7_J4:P?>b*G
%;gMnG![ABj^bTQZ8$Sd!l[fHkN_^VcN_Zg3VMB`J#![o-WAEFWokZ%;a8Ra>50tT=An8UCR()CC?>b,]D/<hAH\\N9CY[BO7YiNP
%VF(X\eWqL*)hIb\>mQ/9QRkF\(:giQW]]XBN69USq+E^%ID5$kg[41`k)K-mcpMPrHThi#(k="EFW9MRier#-9&@6>D)Xhnl-)ZQ
%bc:ug2pF2E%MV=eUsRD\$<@BC9g+EUN2^(G,u(aao@*CoXC4lNCt/YAG<L5XIJh_9L<)W7geZM!$;^![+K=Bo[#]0icDaoa4!s;L
%S<o_:>^,\TDZ8V'S_l&HIbaM0Ke\lq!"1oFUOY.:/FAlal18'3Lpqu?Al*Wa.Kg&,n,iMNpfHCGHqfKmg=FjKL0LYF!*f1NK%Y4i
%ljnTC.7@=Tl<'Or&f*O!Wa79BZ'Wuk<3K]3T6mOpfCGGpMdW/;n.-^tr?*,I//5Kr;A=b@%)2paKVL`_-477/a^MPLM;YI2-opJ3
%?Q)c1':2"l5g#2(RthhE:e5?V4kf2mBhH)r[a:Y:-NOI32@KfM]C25R08X5fhkYL8;?\4K7A6)md6<pblI!)GOgiqfPl9hFBkqpM
%?;>p=dc]AVT9k,HpeXbLF*q0hW/Oaag`-.2g8)4tkAZPAhT@%aU0&]\?5L+T*$Lnf8T9YSYr,Rh3$.\\k--]<I+9Rc7g5ba\p"Ze
%4=])eU`g``a<lW$$^;=+UKLa-)1EoKc)o`!K\!tc7h=t[i%^/1l]u4mqsJX=cQ<<JRE'0G5(!lc!pH4<%;e\]*O(!?&\QO3lTFV3
%N3*g/%QUMp9t#0E;1TQ*B7,oGhiklQ)uWNFrE\6i#jc17r>4^](5r@Sd0GB<kgee3nu*E+YD<ESDlklVYY46D,mf'_9"rWlZ83"a
%OLt!-B`c[a@!#"r%YE;m^+`G46@[S-i(A\0)^TN!`FF]WnuZb4lWHS"E@_o&C^==0c'@tlE-bL%)E/6Y*?>/JPG3FkkCYHWU+INi
%!R"nF[VZYHJtAk5eoS@_Z\SoUX\jaLC-(pe!H[4\'>7%qF]9]9f$pLgI0g]8!bH<`"Z8G"(@:%_1F=i;=Y;:sT$,0;m\#(_]*Lqg
%`56=kV\B/s.^4TKl9LTu]*9fQ&)h&kctHYfC67_VDsCJFadTdi<4_;QoPF'@_<s@@:lE9IcV#15-n,Qb'ZLZM)Hk6nf/LcOPL<eK
%,&k[VL'WM8i]U3HchG2dgDpg:VcEe;rV#B1h.<qu;AY3UbFZ)1C_%8R@LYek*oPXE.Kg^lVd\)<8`%P,!Os)qP-+J4I$s))R.(Bk
%<_a0OOM1n+iBUJUM#r+q@A8p^'Xn3Sc@T>kY^I-OWXOflBIF_Tirm>pHA&aPg6F,j>TuWG$]8W09uN2:iV;f)@O_t=-p4F$m=TA-
%:[qkc<NsX=IJ7/B1Z0smI)&(XMcbAF@*XNAFSYF>8)b?J6>i5TTVd>j&6H/[)=@Z@asJ5PLl^[tE#MnDlJon<9Ug`>&(H(WVU)nf
%O+AdS!Y7keSV1CWTFLWjYt;)mEOdBDf(t:5(K0dGW430gNOE-s>tAECJZI>f"?0<_C.L7N*?]W][su%C6rrK*.iSegBQr6$]Cprf
%EpksQIP^f(4B9cB^ELma))6!.j!hrHHI/B`j?Ul1g!qcHVgA(n0d)\T(Mf>DW+[EC/u]u)b(Mf*MRH`h=ACERJ2tq5)jiBq'd#YG
%,2;>Tdj`6^S%1@8F]q!=i\K4(6TqM'_Pc__/BjdfQ%0DcTQ[CRK?Z_Y_^=)=m3[P501e).`Ie&`pdIIq5Ydg47@f8<QYd6K:b`d"
%/nO1-/.hrb3DZ<I8`p['#peLm"?O5gY+pEU0pYZS<MSH2Zdot958uoE.1F&s?^r_C:'Mki@PZ2[3F#E.I*H)'<f1X[G&abIP)eN>
%EQRu6O@;WgqCT'\XJZhAfBO8g4lQ8LThbEgf,]RtlD#%:Z++\=_\`F#r+;g3-g#g)JE(k1A_,(Vk]#;Y*]gQ!%oX(Qf:h9rRP:t]
%\Tgb=Z<5lI;Wd=.^>N#t9Rg`^=.*URY=LMagH[ED=/H0QA*8IE;Zf`6idQodlA\I_kW\cFZ*>1*V\rMMF%4gn:R!-56%^QU=`4]t
%lt.)M9/t`sbe.D'HHM_5DtL>W[g.>jEt1(`6'&TKOt%oK2qs!nLF!f\kZZ_QMNaRXf<ur@'%ii5pW&)XYohuT@GN!ab,O@*rGW'c
%RQYGLm6JFM/L)pRHM+&t[n.f_i*%P55a&9SLu5\_*dIs[O->8dA&r8e><Ap`Q;:E.5GJBS9ftVf8JG:B9AaqbU&!Ve_\XVZCKiBW
%ATcR;XI#XHpV%qn9aL""9s[LEmN\-@YHJ9,c)9PtrH7AYIG5-IL"kb-4g1d(/\.\NS_$+[JlfBk[T&7b<fE,-%cK]*D8L/$&DD%$
%E=t4pH9oj7Y^BGa4^K/?#]B+M#T@ql`aGUfqRFW*Y`#AMfe3HGXI$hJEEd3$5C@S:+e[6Jj2`bMgqrn:0*F.MJkOEJgC#ZoY*qZu
%qTSeqg6uWr4-\uWQ8#c38r[g-H&44u=#X%\U6MP;8glVof/#/d9&HF#DA/qA&9*JX.&@PPN=Z->\)'ek2?I*`j3P3P\adM4>4%ce
%DoBYaJ<+KE'c)keUuRImlkM+gU"`E<Af(-8K&%cmXT>9#;?IOb9c_<,)\%nH:aO97[.-^knD0`07bUd=q7rg:!tU[ED#9rkpdkV$
%]lJ?U.>ka44Cr8-a;1on9L*I?rq<Wndp,J*e$^nT'O@mt<6#TQ)+@7@T;MsE(J#pXm-6:#FqI%G_@(5/j5_0a:G6il_(?_+ZR#IF
%5L*L?T2.fIj8%D5%0Y+DVZG,4XYpUHC(;],:/,n2dSegF82nqM?kWTJK=W7O<smE+!>+;JW/8e%RF6kQ=BD)4]7%0PLKVdJ>j#,E
%$*)cFlLRTY.JdJ-=D<arUp`rt6PmSPqBp]A?EnV^.EXZ@UsE]<Tta/og)ctVRrCFk=cpFqo"+HQ"SW_f$F`SlZ[FknDkrhYD4h]]
%.oX?KKi5M*iCZY0f)Bd$!f.f$?e-1lFkta,RVB1k]KLsQH8,FYpEj"fekKhl<mla=$_Ynt.b%<QDoHh+&m@gkg[8gqW0EKg\6=_p
%YSf9!lRlADekJ1gTpUis:OcPS8==S1mii^*CV-K%$`e'dT:T)VphFJfHU!!@CD-',<\cj<(H4d:M+K#;L_234]edjMB?l,o4U)1+
%T.bhlFVAVPem3$N<kPNcH(1\+'s3K"BFB67=u4&BD0h,agh*9Mk6t*]/"i/YFh&#YlRlA4ekJ1gTpVqDrU,9m<l\g:F*5EGH7i<n
%*cn]#(>4p1=cV(&D6`fZcYh*\cThF$P99_d0ClmUfiPq9rqm;q^]*T++o&lL5QB:2J,&m3J,Ss:f:RN_X5AC*]D#*nJ+XO1D=;s1
%rorZK?bcX.J,K0/pJ8R&in(r#"@"qrn:Mh\g#)`'Vk<l7]AYu*~>
%AI9_PrivateDataEnd
